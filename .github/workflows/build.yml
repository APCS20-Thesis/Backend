# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'

    - name: Install dependencies
      run: |
        go version
        go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28 
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2 
        go install github.com/gogo/protobuf/protoc-gen-gofast@v1.3.1
        go install github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway@v1.14.7
        
    - name: Build
      run: go build -v ./...

    # - name: Test
    #   run: go test -v ./...

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/checkout@v2
    - name: Deploy to Docker registry
      uses: docker/build-push-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        # repository: wilsontanwm/gosimple
        tag_with_ref: true
        
  notify:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ always() }}  # Run regardless of build result
    steps:
      - name: Send Discord notification
        run: |
          if [ "${{ jobs.build.result }}" == "success" ]; then
            message="Build Backend succeeded üéâ"
          else
            message="Build Backend failed ‚ùå"
          fi
          curl -s -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
            -H 'Content-Type: application/json' \
            -d "{\"content\": \"${message}\"}"
