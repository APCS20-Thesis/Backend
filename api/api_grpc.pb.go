// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CDPServiceClient is the client API for CDPService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CDPServiceClient interface {
	CheckHealth(ctx context.Context, in *CheckHealthRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	GetAccountInfo(ctx context.Context, in *GetAccountInfoRequest, opts ...grpc.CallOption) (*GetAccountInfoResponse, error)
	UpdateAccountInfo(ctx context.Context, in *UpdateAccountInfoRequest, opts ...grpc.CallOption) (*UpdateAccountInfoResponse, error)
	UpdateAccountSetting(ctx context.Context, in *UpdateAccountSettingRequest, opts ...grpc.CallOption) (*UpdateAccountSettingResponse, error)
	GetListDataSources(ctx context.Context, in *GetListDataSourcesRequest, opts ...grpc.CallOption) (*GetListDataSourcesResponse, error)
	GetDataSource(ctx context.Context, in *GetDataSourceRequest, opts ...grpc.CallOption) (*GetDataSourceResponse, error)
	GetListDataTables(ctx context.Context, in *GetListDataTablesRequest, opts ...grpc.CallOption) (*GetListDataTablesResponse, error)
	GetDataTable(ctx context.Context, in *GetDataTableRequest, opts ...grpc.CallOption) (*GetDataTableResponse, error)
	GetQueryDataTable(ctx context.Context, in *GetQueryDataTableRequest, opts ...grpc.CallOption) (*GetQueryDataTableResponse, error)
	GetConnection(ctx context.Context, in *GetConnectionRequest, opts ...grpc.CallOption) (*GetConnectionResponse, error)
	GetListConnections(ctx context.Context, in *GetListConnectionsRequest, opts ...grpc.CallOption) (*GetListConnectionsResponse, error)
	CreateConnection(ctx context.Context, in *CreateConnectionRequest, opts ...grpc.CallOption) (*CreateConnectionResponse, error)
	UpdateConnection(ctx context.Context, in *UpdateConnectionRequest, opts ...grpc.CallOption) (*UpdateConnectionResponse, error)
	DeleteConnection(ctx context.Context, in *DeleteConnectionRequest, opts ...grpc.CallOption) (*DeleteConnectionResponse, error)
	ExportDataToFile(ctx context.Context, in *ExportDataToFileRequest, opts ...grpc.CallOption) (*ExportDataToFileResponse, error)
	ImportCsvFromS3(ctx context.Context, in *ImportCsvFromS3Request, opts ...grpc.CallOption) (*ImportCsvFromS3Response, error)
	GetListFileExportRecords(ctx context.Context, in *GetListFileExportRecordsRequest, opts ...grpc.CallOption) (*GetListFileExportRecordsResponse, error)
	CreateMasterSegment(ctx context.Context, in *CreateMasterSegmentRequest, opts ...grpc.CallOption) (*CreateMasterSegmentResponse, error)
	GetListMasterSegments(ctx context.Context, in *GetListMasterSegmentsRequest, opts ...grpc.CallOption) (*GetListMasterSegmentsResponse, error)
	GetMasterSegmentDetail(ctx context.Context, in *GetMasterSegmentDetailRequest, opts ...grpc.CallOption) (*GetMasterSegmentDetailResponse, error)
	CreateSegment(ctx context.Context, in *CreateSegmentRequest, opts ...grpc.CallOption) (*CreateSegmentResponse, error)
	GetListSegments(ctx context.Context, in *GetListSegmentsRequest, opts ...grpc.CallOption) (*GetListSegmentsResponse, error)
	GetSegmentDetail(ctx context.Context, in *GetSegmentDetailRequest, opts ...grpc.CallOption) (*GetSegmentDetailResponse, error)
	CreateGophishUserGroupFromSegment(ctx context.Context, in *CreateGophishUserGroupFromSegmentRequest, opts ...grpc.CallOption) (*CreateGophishUserGroupFromSegmentResponse, error)
	ImportFromMySQLSource(ctx context.Context, in *ImportFromMySQLSourceRequest, opts ...grpc.CallOption) (*ImportFromMySQLSourceResponse, error)
	ExportToMySQLDestination(ctx context.Context, in *ExportToMySQLDestinationRequest, opts ...grpc.CallOption) (*ExportToMySQLDestinationResponse, error)
	GetListDataDestinations(ctx context.Context, in *GetListDataDestinationsRequest, opts ...grpc.CallOption) (*GetListDataDestinationsResponse, error)
	GetListDataActions(ctx context.Context, in *GetListDataActionsRequest, opts ...grpc.CallOption) (*GetListDataActionsResponse, error)
	TrainPredictModel(ctx context.Context, in *TrainPredictModelRequest, opts ...grpc.CallOption) (*TrainPredictModelResponse, error)
	GetListPredictModels(ctx context.Context, in *GetListPredictModelsRequest, opts ...grpc.CallOption) (*GetListPredictModelsResponse, error)
	GetListSourceTableMap(ctx context.Context, in *GetListSourceTableMapRequest, opts ...grpc.CallOption) (*GetListSourceTableMapResponse, error)
	GetDataDestinationDetail(ctx context.Context, in *GetDataDestinationDetailRequest, opts ...grpc.CallOption) (*GetDataDestinationDetailResponse, error)
	GetPredictModelDetail(ctx context.Context, in *GetPredictModelDetailRequest, opts ...grpc.CallOption) (*GetPredictModelDetailResponse, error)
	GetMySQLTableSchema(ctx context.Context, in *GetMySQLTableSchemaRequest, opts ...grpc.CallOption) (*GetMySQLTableSchemaResponse, error)
	GetMasterSegmentProfiles(ctx context.Context, in *GetMasterSegmentProfilesRequest, opts ...grpc.CallOption) (*GetMasterSegmentProfilesResponse, error)
	ApplyPredictModel(ctx context.Context, in *ApplyPredictModelRequest, opts ...grpc.CallOption) (*ApplyPredictModelResponse, error)
	GetListPredictionActions(ctx context.Context, in *GetListPredictionActionsRequest, opts ...grpc.CallOption) (*GetListPredictionActionsResponse, error)
	TriggerDataActionRun(ctx context.Context, in *TriggerDataActionRunRequest, opts ...grpc.CallOption) (*TriggerDataActionRunResponse, error)
}

type cDPServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCDPServiceClient(cc grpc.ClientConnInterface) CDPServiceClient {
	return &cDPServiceClient{cc}
}

func (c *cDPServiceClient) CheckHealth(ctx context.Context, in *CheckHealthRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/api.CDPService/CheckHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDPServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/api.CDPService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDPServiceClient) SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/api.CDPService/SignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDPServiceClient) GetAccountInfo(ctx context.Context, in *GetAccountInfoRequest, opts ...grpc.CallOption) (*GetAccountInfoResponse, error) {
	out := new(GetAccountInfoResponse)
	err := c.cc.Invoke(ctx, "/api.CDPService/GetAccountInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDPServiceClient) UpdateAccountInfo(ctx context.Context, in *UpdateAccountInfoRequest, opts ...grpc.CallOption) (*UpdateAccountInfoResponse, error) {
	out := new(UpdateAccountInfoResponse)
	err := c.cc.Invoke(ctx, "/api.CDPService/UpdateAccountInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDPServiceClient) UpdateAccountSetting(ctx context.Context, in *UpdateAccountSettingRequest, opts ...grpc.CallOption) (*UpdateAccountSettingResponse, error) {
	out := new(UpdateAccountSettingResponse)
	err := c.cc.Invoke(ctx, "/api.CDPService/UpdateAccountSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDPServiceClient) GetListDataSources(ctx context.Context, in *GetListDataSourcesRequest, opts ...grpc.CallOption) (*GetListDataSourcesResponse, error) {
	out := new(GetListDataSourcesResponse)
	err := c.cc.Invoke(ctx, "/api.CDPService/GetListDataSources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDPServiceClient) GetDataSource(ctx context.Context, in *GetDataSourceRequest, opts ...grpc.CallOption) (*GetDataSourceResponse, error) {
	out := new(GetDataSourceResponse)
	err := c.cc.Invoke(ctx, "/api.CDPService/GetDataSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDPServiceClient) GetListDataTables(ctx context.Context, in *GetListDataTablesRequest, opts ...grpc.CallOption) (*GetListDataTablesResponse, error) {
	out := new(GetListDataTablesResponse)
	err := c.cc.Invoke(ctx, "/api.CDPService/GetListDataTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDPServiceClient) GetDataTable(ctx context.Context, in *GetDataTableRequest, opts ...grpc.CallOption) (*GetDataTableResponse, error) {
	out := new(GetDataTableResponse)
	err := c.cc.Invoke(ctx, "/api.CDPService/GetDataTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDPServiceClient) GetQueryDataTable(ctx context.Context, in *GetQueryDataTableRequest, opts ...grpc.CallOption) (*GetQueryDataTableResponse, error) {
	out := new(GetQueryDataTableResponse)
	err := c.cc.Invoke(ctx, "/api.CDPService/GetQueryDataTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDPServiceClient) GetConnection(ctx context.Context, in *GetConnectionRequest, opts ...grpc.CallOption) (*GetConnectionResponse, error) {
	out := new(GetConnectionResponse)
	err := c.cc.Invoke(ctx, "/api.CDPService/GetConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDPServiceClient) GetListConnections(ctx context.Context, in *GetListConnectionsRequest, opts ...grpc.CallOption) (*GetListConnectionsResponse, error) {
	out := new(GetListConnectionsResponse)
	err := c.cc.Invoke(ctx, "/api.CDPService/GetListConnections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDPServiceClient) CreateConnection(ctx context.Context, in *CreateConnectionRequest, opts ...grpc.CallOption) (*CreateConnectionResponse, error) {
	out := new(CreateConnectionResponse)
	err := c.cc.Invoke(ctx, "/api.CDPService/CreateConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDPServiceClient) UpdateConnection(ctx context.Context, in *UpdateConnectionRequest, opts ...grpc.CallOption) (*UpdateConnectionResponse, error) {
	out := new(UpdateConnectionResponse)
	err := c.cc.Invoke(ctx, "/api.CDPService/UpdateConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDPServiceClient) DeleteConnection(ctx context.Context, in *DeleteConnectionRequest, opts ...grpc.CallOption) (*DeleteConnectionResponse, error) {
	out := new(DeleteConnectionResponse)
	err := c.cc.Invoke(ctx, "/api.CDPService/DeleteConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDPServiceClient) ExportDataToFile(ctx context.Context, in *ExportDataToFileRequest, opts ...grpc.CallOption) (*ExportDataToFileResponse, error) {
	out := new(ExportDataToFileResponse)
	err := c.cc.Invoke(ctx, "/api.CDPService/ExportDataToFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDPServiceClient) ImportCsvFromS3(ctx context.Context, in *ImportCsvFromS3Request, opts ...grpc.CallOption) (*ImportCsvFromS3Response, error) {
	out := new(ImportCsvFromS3Response)
	err := c.cc.Invoke(ctx, "/api.CDPService/ImportCsvFromS3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDPServiceClient) GetListFileExportRecords(ctx context.Context, in *GetListFileExportRecordsRequest, opts ...grpc.CallOption) (*GetListFileExportRecordsResponse, error) {
	out := new(GetListFileExportRecordsResponse)
	err := c.cc.Invoke(ctx, "/api.CDPService/GetListFileExportRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDPServiceClient) CreateMasterSegment(ctx context.Context, in *CreateMasterSegmentRequest, opts ...grpc.CallOption) (*CreateMasterSegmentResponse, error) {
	out := new(CreateMasterSegmentResponse)
	err := c.cc.Invoke(ctx, "/api.CDPService/CreateMasterSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDPServiceClient) GetListMasterSegments(ctx context.Context, in *GetListMasterSegmentsRequest, opts ...grpc.CallOption) (*GetListMasterSegmentsResponse, error) {
	out := new(GetListMasterSegmentsResponse)
	err := c.cc.Invoke(ctx, "/api.CDPService/GetListMasterSegments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDPServiceClient) GetMasterSegmentDetail(ctx context.Context, in *GetMasterSegmentDetailRequest, opts ...grpc.CallOption) (*GetMasterSegmentDetailResponse, error) {
	out := new(GetMasterSegmentDetailResponse)
	err := c.cc.Invoke(ctx, "/api.CDPService/GetMasterSegmentDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDPServiceClient) CreateSegment(ctx context.Context, in *CreateSegmentRequest, opts ...grpc.CallOption) (*CreateSegmentResponse, error) {
	out := new(CreateSegmentResponse)
	err := c.cc.Invoke(ctx, "/api.CDPService/CreateSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDPServiceClient) GetListSegments(ctx context.Context, in *GetListSegmentsRequest, opts ...grpc.CallOption) (*GetListSegmentsResponse, error) {
	out := new(GetListSegmentsResponse)
	err := c.cc.Invoke(ctx, "/api.CDPService/GetListSegments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDPServiceClient) GetSegmentDetail(ctx context.Context, in *GetSegmentDetailRequest, opts ...grpc.CallOption) (*GetSegmentDetailResponse, error) {
	out := new(GetSegmentDetailResponse)
	err := c.cc.Invoke(ctx, "/api.CDPService/GetSegmentDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDPServiceClient) CreateGophishUserGroupFromSegment(ctx context.Context, in *CreateGophishUserGroupFromSegmentRequest, opts ...grpc.CallOption) (*CreateGophishUserGroupFromSegmentResponse, error) {
	out := new(CreateGophishUserGroupFromSegmentResponse)
	err := c.cc.Invoke(ctx, "/api.CDPService/CreateGophishUserGroupFromSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDPServiceClient) ImportFromMySQLSource(ctx context.Context, in *ImportFromMySQLSourceRequest, opts ...grpc.CallOption) (*ImportFromMySQLSourceResponse, error) {
	out := new(ImportFromMySQLSourceResponse)
	err := c.cc.Invoke(ctx, "/api.CDPService/ImportFromMySQLSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDPServiceClient) ExportToMySQLDestination(ctx context.Context, in *ExportToMySQLDestinationRequest, opts ...grpc.CallOption) (*ExportToMySQLDestinationResponse, error) {
	out := new(ExportToMySQLDestinationResponse)
	err := c.cc.Invoke(ctx, "/api.CDPService/ExportToMySQLDestination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDPServiceClient) GetListDataDestinations(ctx context.Context, in *GetListDataDestinationsRequest, opts ...grpc.CallOption) (*GetListDataDestinationsResponse, error) {
	out := new(GetListDataDestinationsResponse)
	err := c.cc.Invoke(ctx, "/api.CDPService/GetListDataDestinations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDPServiceClient) GetListDataActions(ctx context.Context, in *GetListDataActionsRequest, opts ...grpc.CallOption) (*GetListDataActionsResponse, error) {
	out := new(GetListDataActionsResponse)
	err := c.cc.Invoke(ctx, "/api.CDPService/GetListDataActions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDPServiceClient) TrainPredictModel(ctx context.Context, in *TrainPredictModelRequest, opts ...grpc.CallOption) (*TrainPredictModelResponse, error) {
	out := new(TrainPredictModelResponse)
	err := c.cc.Invoke(ctx, "/api.CDPService/TrainPredictModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDPServiceClient) GetListPredictModels(ctx context.Context, in *GetListPredictModelsRequest, opts ...grpc.CallOption) (*GetListPredictModelsResponse, error) {
	out := new(GetListPredictModelsResponse)
	err := c.cc.Invoke(ctx, "/api.CDPService/GetListPredictModels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDPServiceClient) GetListSourceTableMap(ctx context.Context, in *GetListSourceTableMapRequest, opts ...grpc.CallOption) (*GetListSourceTableMapResponse, error) {
	out := new(GetListSourceTableMapResponse)
	err := c.cc.Invoke(ctx, "/api.CDPService/GetListSourceTableMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDPServiceClient) GetDataDestinationDetail(ctx context.Context, in *GetDataDestinationDetailRequest, opts ...grpc.CallOption) (*GetDataDestinationDetailResponse, error) {
	out := new(GetDataDestinationDetailResponse)
	err := c.cc.Invoke(ctx, "/api.CDPService/GetDataDestinationDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDPServiceClient) GetPredictModelDetail(ctx context.Context, in *GetPredictModelDetailRequest, opts ...grpc.CallOption) (*GetPredictModelDetailResponse, error) {
	out := new(GetPredictModelDetailResponse)
	err := c.cc.Invoke(ctx, "/api.CDPService/GetPredictModelDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDPServiceClient) GetMySQLTableSchema(ctx context.Context, in *GetMySQLTableSchemaRequest, opts ...grpc.CallOption) (*GetMySQLTableSchemaResponse, error) {
	out := new(GetMySQLTableSchemaResponse)
	err := c.cc.Invoke(ctx, "/api.CDPService/GetMySQLTableSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDPServiceClient) GetMasterSegmentProfiles(ctx context.Context, in *GetMasterSegmentProfilesRequest, opts ...grpc.CallOption) (*GetMasterSegmentProfilesResponse, error) {
	out := new(GetMasterSegmentProfilesResponse)
	err := c.cc.Invoke(ctx, "/api.CDPService/GetMasterSegmentProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDPServiceClient) ApplyPredictModel(ctx context.Context, in *ApplyPredictModelRequest, opts ...grpc.CallOption) (*ApplyPredictModelResponse, error) {
	out := new(ApplyPredictModelResponse)
	err := c.cc.Invoke(ctx, "/api.CDPService/ApplyPredictModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDPServiceClient) GetListPredictionActions(ctx context.Context, in *GetListPredictionActionsRequest, opts ...grpc.CallOption) (*GetListPredictionActionsResponse, error) {
	out := new(GetListPredictionActionsResponse)
	err := c.cc.Invoke(ctx, "/api.CDPService/GetListPredictionActions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDPServiceClient) TriggerDataActionRun(ctx context.Context, in *TriggerDataActionRunRequest, opts ...grpc.CallOption) (*TriggerDataActionRunResponse, error) {
	out := new(TriggerDataActionRunResponse)
	err := c.cc.Invoke(ctx, "/api.CDPService/TriggerDataActionRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CDPServiceServer is the server API for CDPService service.
// All implementations must embed UnimplementedCDPServiceServer
// for forward compatibility
type CDPServiceServer interface {
	CheckHealth(context.Context, *CheckHealthRequest) (*CommonResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	SignUp(context.Context, *SignUpRequest) (*CommonResponse, error)
	GetAccountInfo(context.Context, *GetAccountInfoRequest) (*GetAccountInfoResponse, error)
	UpdateAccountInfo(context.Context, *UpdateAccountInfoRequest) (*UpdateAccountInfoResponse, error)
	UpdateAccountSetting(context.Context, *UpdateAccountSettingRequest) (*UpdateAccountSettingResponse, error)
	GetListDataSources(context.Context, *GetListDataSourcesRequest) (*GetListDataSourcesResponse, error)
	GetDataSource(context.Context, *GetDataSourceRequest) (*GetDataSourceResponse, error)
	GetListDataTables(context.Context, *GetListDataTablesRequest) (*GetListDataTablesResponse, error)
	GetDataTable(context.Context, *GetDataTableRequest) (*GetDataTableResponse, error)
	GetQueryDataTable(context.Context, *GetQueryDataTableRequest) (*GetQueryDataTableResponse, error)
	GetConnection(context.Context, *GetConnectionRequest) (*GetConnectionResponse, error)
	GetListConnections(context.Context, *GetListConnectionsRequest) (*GetListConnectionsResponse, error)
	CreateConnection(context.Context, *CreateConnectionRequest) (*CreateConnectionResponse, error)
	UpdateConnection(context.Context, *UpdateConnectionRequest) (*UpdateConnectionResponse, error)
	DeleteConnection(context.Context, *DeleteConnectionRequest) (*DeleteConnectionResponse, error)
	ExportDataToFile(context.Context, *ExportDataToFileRequest) (*ExportDataToFileResponse, error)
	ImportCsvFromS3(context.Context, *ImportCsvFromS3Request) (*ImportCsvFromS3Response, error)
	GetListFileExportRecords(context.Context, *GetListFileExportRecordsRequest) (*GetListFileExportRecordsResponse, error)
	CreateMasterSegment(context.Context, *CreateMasterSegmentRequest) (*CreateMasterSegmentResponse, error)
	GetListMasterSegments(context.Context, *GetListMasterSegmentsRequest) (*GetListMasterSegmentsResponse, error)
	GetMasterSegmentDetail(context.Context, *GetMasterSegmentDetailRequest) (*GetMasterSegmentDetailResponse, error)
	CreateSegment(context.Context, *CreateSegmentRequest) (*CreateSegmentResponse, error)
	GetListSegments(context.Context, *GetListSegmentsRequest) (*GetListSegmentsResponse, error)
	GetSegmentDetail(context.Context, *GetSegmentDetailRequest) (*GetSegmentDetailResponse, error)
	CreateGophishUserGroupFromSegment(context.Context, *CreateGophishUserGroupFromSegmentRequest) (*CreateGophishUserGroupFromSegmentResponse, error)
	ImportFromMySQLSource(context.Context, *ImportFromMySQLSourceRequest) (*ImportFromMySQLSourceResponse, error)
	ExportToMySQLDestination(context.Context, *ExportToMySQLDestinationRequest) (*ExportToMySQLDestinationResponse, error)
	GetListDataDestinations(context.Context, *GetListDataDestinationsRequest) (*GetListDataDestinationsResponse, error)
	GetListDataActions(context.Context, *GetListDataActionsRequest) (*GetListDataActionsResponse, error)
	TrainPredictModel(context.Context, *TrainPredictModelRequest) (*TrainPredictModelResponse, error)
	GetListPredictModels(context.Context, *GetListPredictModelsRequest) (*GetListPredictModelsResponse, error)
	GetListSourceTableMap(context.Context, *GetListSourceTableMapRequest) (*GetListSourceTableMapResponse, error)
	GetDataDestinationDetail(context.Context, *GetDataDestinationDetailRequest) (*GetDataDestinationDetailResponse, error)
	GetPredictModelDetail(context.Context, *GetPredictModelDetailRequest) (*GetPredictModelDetailResponse, error)
	GetMySQLTableSchema(context.Context, *GetMySQLTableSchemaRequest) (*GetMySQLTableSchemaResponse, error)
	GetMasterSegmentProfiles(context.Context, *GetMasterSegmentProfilesRequest) (*GetMasterSegmentProfilesResponse, error)
	ApplyPredictModel(context.Context, *ApplyPredictModelRequest) (*ApplyPredictModelResponse, error)
	GetListPredictionActions(context.Context, *GetListPredictionActionsRequest) (*GetListPredictionActionsResponse, error)
	TriggerDataActionRun(context.Context, *TriggerDataActionRunRequest) (*TriggerDataActionRunResponse, error)
	mustEmbedUnimplementedCDPServiceServer()
}

// UnimplementedCDPServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCDPServiceServer struct {
}

func (UnimplementedCDPServiceServer) CheckHealth(context.Context, *CheckHealthRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHealth not implemented")
}
func (UnimplementedCDPServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedCDPServiceServer) SignUp(context.Context, *SignUpRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedCDPServiceServer) GetAccountInfo(context.Context, *GetAccountInfoRequest) (*GetAccountInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountInfo not implemented")
}
func (UnimplementedCDPServiceServer) UpdateAccountInfo(context.Context, *UpdateAccountInfoRequest) (*UpdateAccountInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountInfo not implemented")
}
func (UnimplementedCDPServiceServer) UpdateAccountSetting(context.Context, *UpdateAccountSettingRequest) (*UpdateAccountSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountSetting not implemented")
}
func (UnimplementedCDPServiceServer) GetListDataSources(context.Context, *GetListDataSourcesRequest) (*GetListDataSourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListDataSources not implemented")
}
func (UnimplementedCDPServiceServer) GetDataSource(context.Context, *GetDataSourceRequest) (*GetDataSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataSource not implemented")
}
func (UnimplementedCDPServiceServer) GetListDataTables(context.Context, *GetListDataTablesRequest) (*GetListDataTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListDataTables not implemented")
}
func (UnimplementedCDPServiceServer) GetDataTable(context.Context, *GetDataTableRequest) (*GetDataTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataTable not implemented")
}
func (UnimplementedCDPServiceServer) GetQueryDataTable(context.Context, *GetQueryDataTableRequest) (*GetQueryDataTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueryDataTable not implemented")
}
func (UnimplementedCDPServiceServer) GetConnection(context.Context, *GetConnectionRequest) (*GetConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnection not implemented")
}
func (UnimplementedCDPServiceServer) GetListConnections(context.Context, *GetListConnectionsRequest) (*GetListConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListConnections not implemented")
}
func (UnimplementedCDPServiceServer) CreateConnection(context.Context, *CreateConnectionRequest) (*CreateConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnection not implemented")
}
func (UnimplementedCDPServiceServer) UpdateConnection(context.Context, *UpdateConnectionRequest) (*UpdateConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConnection not implemented")
}
func (UnimplementedCDPServiceServer) DeleteConnection(context.Context, *DeleteConnectionRequest) (*DeleteConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConnection not implemented")
}
func (UnimplementedCDPServiceServer) ExportDataToFile(context.Context, *ExportDataToFileRequest) (*ExportDataToFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportDataToFile not implemented")
}
func (UnimplementedCDPServiceServer) ImportCsvFromS3(context.Context, *ImportCsvFromS3Request) (*ImportCsvFromS3Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportCsvFromS3 not implemented")
}
func (UnimplementedCDPServiceServer) GetListFileExportRecords(context.Context, *GetListFileExportRecordsRequest) (*GetListFileExportRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListFileExportRecords not implemented")
}
func (UnimplementedCDPServiceServer) CreateMasterSegment(context.Context, *CreateMasterSegmentRequest) (*CreateMasterSegmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMasterSegment not implemented")
}
func (UnimplementedCDPServiceServer) GetListMasterSegments(context.Context, *GetListMasterSegmentsRequest) (*GetListMasterSegmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListMasterSegments not implemented")
}
func (UnimplementedCDPServiceServer) GetMasterSegmentDetail(context.Context, *GetMasterSegmentDetailRequest) (*GetMasterSegmentDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMasterSegmentDetail not implemented")
}
func (UnimplementedCDPServiceServer) CreateSegment(context.Context, *CreateSegmentRequest) (*CreateSegmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSegment not implemented")
}
func (UnimplementedCDPServiceServer) GetListSegments(context.Context, *GetListSegmentsRequest) (*GetListSegmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListSegments not implemented")
}
func (UnimplementedCDPServiceServer) GetSegmentDetail(context.Context, *GetSegmentDetailRequest) (*GetSegmentDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSegmentDetail not implemented")
}
func (UnimplementedCDPServiceServer) CreateGophishUserGroupFromSegment(context.Context, *CreateGophishUserGroupFromSegmentRequest) (*CreateGophishUserGroupFromSegmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGophishUserGroupFromSegment not implemented")
}
func (UnimplementedCDPServiceServer) ImportFromMySQLSource(context.Context, *ImportFromMySQLSourceRequest) (*ImportFromMySQLSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportFromMySQLSource not implemented")
}
func (UnimplementedCDPServiceServer) ExportToMySQLDestination(context.Context, *ExportToMySQLDestinationRequest) (*ExportToMySQLDestinationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportToMySQLDestination not implemented")
}
func (UnimplementedCDPServiceServer) GetListDataDestinations(context.Context, *GetListDataDestinationsRequest) (*GetListDataDestinationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListDataDestinations not implemented")
}
func (UnimplementedCDPServiceServer) GetListDataActions(context.Context, *GetListDataActionsRequest) (*GetListDataActionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListDataActions not implemented")
}
func (UnimplementedCDPServiceServer) TrainPredictModel(context.Context, *TrainPredictModelRequest) (*TrainPredictModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrainPredictModel not implemented")
}
func (UnimplementedCDPServiceServer) GetListPredictModels(context.Context, *GetListPredictModelsRequest) (*GetListPredictModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListPredictModels not implemented")
}
func (UnimplementedCDPServiceServer) GetListSourceTableMap(context.Context, *GetListSourceTableMapRequest) (*GetListSourceTableMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListSourceTableMap not implemented")
}
func (UnimplementedCDPServiceServer) GetDataDestinationDetail(context.Context, *GetDataDestinationDetailRequest) (*GetDataDestinationDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataDestinationDetail not implemented")
}
func (UnimplementedCDPServiceServer) GetPredictModelDetail(context.Context, *GetPredictModelDetailRequest) (*GetPredictModelDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPredictModelDetail not implemented")
}
func (UnimplementedCDPServiceServer) GetMySQLTableSchema(context.Context, *GetMySQLTableSchemaRequest) (*GetMySQLTableSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMySQLTableSchema not implemented")
}
func (UnimplementedCDPServiceServer) GetMasterSegmentProfiles(context.Context, *GetMasterSegmentProfilesRequest) (*GetMasterSegmentProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMasterSegmentProfiles not implemented")
}
func (UnimplementedCDPServiceServer) ApplyPredictModel(context.Context, *ApplyPredictModelRequest) (*ApplyPredictModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyPredictModel not implemented")
}
func (UnimplementedCDPServiceServer) GetListPredictionActions(context.Context, *GetListPredictionActionsRequest) (*GetListPredictionActionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListPredictionActions not implemented")
}
func (UnimplementedCDPServiceServer) TriggerDataActionRun(context.Context, *TriggerDataActionRunRequest) (*TriggerDataActionRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerDataActionRun not implemented")
}
func (UnimplementedCDPServiceServer) mustEmbedUnimplementedCDPServiceServer() {}

// UnsafeCDPServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CDPServiceServer will
// result in compilation errors.
type UnsafeCDPServiceServer interface {
	mustEmbedUnimplementedCDPServiceServer()
}

func RegisterCDPServiceServer(s grpc.ServiceRegistrar, srv CDPServiceServer) {
	s.RegisterService(&CDPService_ServiceDesc, srv)
}

func _CDPService_CheckHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDPServiceServer).CheckHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CDPService/CheckHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDPServiceServer).CheckHealth(ctx, req.(*CheckHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDPService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDPServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CDPService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDPServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDPService_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDPServiceServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CDPService/SignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDPServiceServer).SignUp(ctx, req.(*SignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDPService_GetAccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDPServiceServer).GetAccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CDPService/GetAccountInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDPServiceServer).GetAccountInfo(ctx, req.(*GetAccountInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDPService_UpdateAccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDPServiceServer).UpdateAccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CDPService/UpdateAccountInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDPServiceServer).UpdateAccountInfo(ctx, req.(*UpdateAccountInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDPService_UpdateAccountSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDPServiceServer).UpdateAccountSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CDPService/UpdateAccountSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDPServiceServer).UpdateAccountSetting(ctx, req.(*UpdateAccountSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDPService_GetListDataSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListDataSourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDPServiceServer).GetListDataSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CDPService/GetListDataSources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDPServiceServer).GetListDataSources(ctx, req.(*GetListDataSourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDPService_GetDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDPServiceServer).GetDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CDPService/GetDataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDPServiceServer).GetDataSource(ctx, req.(*GetDataSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDPService_GetListDataTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListDataTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDPServiceServer).GetListDataTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CDPService/GetListDataTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDPServiceServer).GetListDataTables(ctx, req.(*GetListDataTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDPService_GetDataTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDPServiceServer).GetDataTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CDPService/GetDataTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDPServiceServer).GetDataTable(ctx, req.(*GetDataTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDPService_GetQueryDataTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueryDataTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDPServiceServer).GetQueryDataTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CDPService/GetQueryDataTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDPServiceServer).GetQueryDataTable(ctx, req.(*GetQueryDataTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDPService_GetConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDPServiceServer).GetConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CDPService/GetConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDPServiceServer).GetConnection(ctx, req.(*GetConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDPService_GetListConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDPServiceServer).GetListConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CDPService/GetListConnections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDPServiceServer).GetListConnections(ctx, req.(*GetListConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDPService_CreateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDPServiceServer).CreateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CDPService/CreateConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDPServiceServer).CreateConnection(ctx, req.(*CreateConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDPService_UpdateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDPServiceServer).UpdateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CDPService/UpdateConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDPServiceServer).UpdateConnection(ctx, req.(*UpdateConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDPService_DeleteConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDPServiceServer).DeleteConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CDPService/DeleteConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDPServiceServer).DeleteConnection(ctx, req.(*DeleteConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDPService_ExportDataToFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportDataToFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDPServiceServer).ExportDataToFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CDPService/ExportDataToFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDPServiceServer).ExportDataToFile(ctx, req.(*ExportDataToFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDPService_ImportCsvFromS3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportCsvFromS3Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDPServiceServer).ImportCsvFromS3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CDPService/ImportCsvFromS3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDPServiceServer).ImportCsvFromS3(ctx, req.(*ImportCsvFromS3Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDPService_GetListFileExportRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListFileExportRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDPServiceServer).GetListFileExportRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CDPService/GetListFileExportRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDPServiceServer).GetListFileExportRecords(ctx, req.(*GetListFileExportRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDPService_CreateMasterSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMasterSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDPServiceServer).CreateMasterSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CDPService/CreateMasterSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDPServiceServer).CreateMasterSegment(ctx, req.(*CreateMasterSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDPService_GetListMasterSegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListMasterSegmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDPServiceServer).GetListMasterSegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CDPService/GetListMasterSegments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDPServiceServer).GetListMasterSegments(ctx, req.(*GetListMasterSegmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDPService_GetMasterSegmentDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMasterSegmentDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDPServiceServer).GetMasterSegmentDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CDPService/GetMasterSegmentDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDPServiceServer).GetMasterSegmentDetail(ctx, req.(*GetMasterSegmentDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDPService_CreateSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDPServiceServer).CreateSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CDPService/CreateSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDPServiceServer).CreateSegment(ctx, req.(*CreateSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDPService_GetListSegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListSegmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDPServiceServer).GetListSegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CDPService/GetListSegments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDPServiceServer).GetListSegments(ctx, req.(*GetListSegmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDPService_GetSegmentDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSegmentDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDPServiceServer).GetSegmentDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CDPService/GetSegmentDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDPServiceServer).GetSegmentDetail(ctx, req.(*GetSegmentDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDPService_CreateGophishUserGroupFromSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGophishUserGroupFromSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDPServiceServer).CreateGophishUserGroupFromSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CDPService/CreateGophishUserGroupFromSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDPServiceServer).CreateGophishUserGroupFromSegment(ctx, req.(*CreateGophishUserGroupFromSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDPService_ImportFromMySQLSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportFromMySQLSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDPServiceServer).ImportFromMySQLSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CDPService/ImportFromMySQLSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDPServiceServer).ImportFromMySQLSource(ctx, req.(*ImportFromMySQLSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDPService_ExportToMySQLDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportToMySQLDestinationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDPServiceServer).ExportToMySQLDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CDPService/ExportToMySQLDestination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDPServiceServer).ExportToMySQLDestination(ctx, req.(*ExportToMySQLDestinationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDPService_GetListDataDestinations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListDataDestinationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDPServiceServer).GetListDataDestinations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CDPService/GetListDataDestinations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDPServiceServer).GetListDataDestinations(ctx, req.(*GetListDataDestinationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDPService_GetListDataActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListDataActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDPServiceServer).GetListDataActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CDPService/GetListDataActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDPServiceServer).GetListDataActions(ctx, req.(*GetListDataActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDPService_TrainPredictModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainPredictModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDPServiceServer).TrainPredictModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CDPService/TrainPredictModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDPServiceServer).TrainPredictModel(ctx, req.(*TrainPredictModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDPService_GetListPredictModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListPredictModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDPServiceServer).GetListPredictModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CDPService/GetListPredictModels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDPServiceServer).GetListPredictModels(ctx, req.(*GetListPredictModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDPService_GetListSourceTableMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListSourceTableMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDPServiceServer).GetListSourceTableMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CDPService/GetListSourceTableMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDPServiceServer).GetListSourceTableMap(ctx, req.(*GetListSourceTableMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDPService_GetDataDestinationDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataDestinationDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDPServiceServer).GetDataDestinationDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CDPService/GetDataDestinationDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDPServiceServer).GetDataDestinationDetail(ctx, req.(*GetDataDestinationDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDPService_GetPredictModelDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPredictModelDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDPServiceServer).GetPredictModelDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CDPService/GetPredictModelDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDPServiceServer).GetPredictModelDetail(ctx, req.(*GetPredictModelDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDPService_GetMySQLTableSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMySQLTableSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDPServiceServer).GetMySQLTableSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CDPService/GetMySQLTableSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDPServiceServer).GetMySQLTableSchema(ctx, req.(*GetMySQLTableSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDPService_GetMasterSegmentProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMasterSegmentProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDPServiceServer).GetMasterSegmentProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CDPService/GetMasterSegmentProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDPServiceServer).GetMasterSegmentProfiles(ctx, req.(*GetMasterSegmentProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDPService_ApplyPredictModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyPredictModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDPServiceServer).ApplyPredictModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CDPService/ApplyPredictModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDPServiceServer).ApplyPredictModel(ctx, req.(*ApplyPredictModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDPService_GetListPredictionActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListPredictionActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDPServiceServer).GetListPredictionActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CDPService/GetListPredictionActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDPServiceServer).GetListPredictionActions(ctx, req.(*GetListPredictionActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDPService_TriggerDataActionRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerDataActionRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDPServiceServer).TriggerDataActionRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CDPService/TriggerDataActionRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDPServiceServer).TriggerDataActionRun(ctx, req.(*TriggerDataActionRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CDPService_ServiceDesc is the grpc.ServiceDesc for CDPService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CDPService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.CDPService",
	HandlerType: (*CDPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckHealth",
			Handler:    _CDPService_CheckHealth_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _CDPService_Login_Handler,
		},
		{
			MethodName: "SignUp",
			Handler:    _CDPService_SignUp_Handler,
		},
		{
			MethodName: "GetAccountInfo",
			Handler:    _CDPService_GetAccountInfo_Handler,
		},
		{
			MethodName: "UpdateAccountInfo",
			Handler:    _CDPService_UpdateAccountInfo_Handler,
		},
		{
			MethodName: "UpdateAccountSetting",
			Handler:    _CDPService_UpdateAccountSetting_Handler,
		},
		{
			MethodName: "GetListDataSources",
			Handler:    _CDPService_GetListDataSources_Handler,
		},
		{
			MethodName: "GetDataSource",
			Handler:    _CDPService_GetDataSource_Handler,
		},
		{
			MethodName: "GetListDataTables",
			Handler:    _CDPService_GetListDataTables_Handler,
		},
		{
			MethodName: "GetDataTable",
			Handler:    _CDPService_GetDataTable_Handler,
		},
		{
			MethodName: "GetQueryDataTable",
			Handler:    _CDPService_GetQueryDataTable_Handler,
		},
		{
			MethodName: "GetConnection",
			Handler:    _CDPService_GetConnection_Handler,
		},
		{
			MethodName: "GetListConnections",
			Handler:    _CDPService_GetListConnections_Handler,
		},
		{
			MethodName: "CreateConnection",
			Handler:    _CDPService_CreateConnection_Handler,
		},
		{
			MethodName: "UpdateConnection",
			Handler:    _CDPService_UpdateConnection_Handler,
		},
		{
			MethodName: "DeleteConnection",
			Handler:    _CDPService_DeleteConnection_Handler,
		},
		{
			MethodName: "ExportDataToFile",
			Handler:    _CDPService_ExportDataToFile_Handler,
		},
		{
			MethodName: "ImportCsvFromS3",
			Handler:    _CDPService_ImportCsvFromS3_Handler,
		},
		{
			MethodName: "GetListFileExportRecords",
			Handler:    _CDPService_GetListFileExportRecords_Handler,
		},
		{
			MethodName: "CreateMasterSegment",
			Handler:    _CDPService_CreateMasterSegment_Handler,
		},
		{
			MethodName: "GetListMasterSegments",
			Handler:    _CDPService_GetListMasterSegments_Handler,
		},
		{
			MethodName: "GetMasterSegmentDetail",
			Handler:    _CDPService_GetMasterSegmentDetail_Handler,
		},
		{
			MethodName: "CreateSegment",
			Handler:    _CDPService_CreateSegment_Handler,
		},
		{
			MethodName: "GetListSegments",
			Handler:    _CDPService_GetListSegments_Handler,
		},
		{
			MethodName: "GetSegmentDetail",
			Handler:    _CDPService_GetSegmentDetail_Handler,
		},
		{
			MethodName: "CreateGophishUserGroupFromSegment",
			Handler:    _CDPService_CreateGophishUserGroupFromSegment_Handler,
		},
		{
			MethodName: "ImportFromMySQLSource",
			Handler:    _CDPService_ImportFromMySQLSource_Handler,
		},
		{
			MethodName: "ExportToMySQLDestination",
			Handler:    _CDPService_ExportToMySQLDestination_Handler,
		},
		{
			MethodName: "GetListDataDestinations",
			Handler:    _CDPService_GetListDataDestinations_Handler,
		},
		{
			MethodName: "GetListDataActions",
			Handler:    _CDPService_GetListDataActions_Handler,
		},
		{
			MethodName: "TrainPredictModel",
			Handler:    _CDPService_TrainPredictModel_Handler,
		},
		{
			MethodName: "GetListPredictModels",
			Handler:    _CDPService_GetListPredictModels_Handler,
		},
		{
			MethodName: "GetListSourceTableMap",
			Handler:    _CDPService_GetListSourceTableMap_Handler,
		},
		{
			MethodName: "GetDataDestinationDetail",
			Handler:    _CDPService_GetDataDestinationDetail_Handler,
		},
		{
			MethodName: "GetPredictModelDetail",
			Handler:    _CDPService_GetPredictModelDetail_Handler,
		},
		{
			MethodName: "GetMySQLTableSchema",
			Handler:    _CDPService_GetMySQLTableSchema_Handler,
		},
		{
			MethodName: "GetMasterSegmentProfiles",
			Handler:    _CDPService_GetMasterSegmentProfiles_Handler,
		},
		{
			MethodName: "ApplyPredictModel",
			Handler:    _CDPService_ApplyPredictModel_Handler,
		},
		{
			MethodName: "GetListPredictionActions",
			Handler:    _CDPService_GetListPredictionActions_Handler,
		},
		{
			MethodName: "TriggerDataActionRun",
			Handler:    _CDPService_TriggerDataActionRun_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
