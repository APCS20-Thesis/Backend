// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CheckHealthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckHealthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckHealthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckHealthRequestMultiError, or nil if none found.
func (m *CheckHealthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckHealthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CheckHealthRequestMultiError(errors)
	}

	return nil
}

// CheckHealthRequestMultiError is an error wrapping multiple validation errors
// returned by CheckHealthRequest.ValidateAll() if the designated constraints
// aren't met.
type CheckHealthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckHealthRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckHealthRequestMultiError) AllErrors() []error { return m }

// CheckHealthRequestValidationError is the validation error returned by
// CheckHealthRequest.Validate if the designated constraints aren't met.
type CheckHealthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckHealthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckHealthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckHealthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckHealthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckHealthRequestValidationError) ErrorName() string {
	return "CheckHealthRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckHealthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckHealthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckHealthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckHealthRequestValidationError{}

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestMultiError, or
// nil if none found.
func (m *LoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := LoginRequestValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 8 {
		err := LoginRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 8 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LoginRequestMultiError(errors)
	}

	return nil
}

// LoginRequestMultiError is an error wrapping multiple validation errors
// returned by LoginRequest.ValidateAll() if the designated constraints aren't met.
type LoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestMultiError) AllErrors() []error { return m }

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on LoginResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginResponseMultiError, or
// nil if none found.
func (m *LoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for AccessToken

	if len(errors) > 0 {
		return LoginResponseMultiError(errors)
	}

	return nil
}

// LoginResponseMultiError is an error wrapping multiple validation errors
// returned by LoginResponse.ValidateAll() if the designated constraints
// aren't met.
type LoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginResponseMultiError) AllErrors() []error { return m }

// LoginResponseValidationError is the validation error returned by
// LoginResponse.Validate if the designated constraints aren't met.
type LoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginResponseValidationError) ErrorName() string { return "LoginResponseValidationError" }

// Error satisfies the builtin error interface
func (e LoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginResponseValidationError{}

// Validate checks the field values on SignUpRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignUpRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignUpRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignUpRequestMultiError, or
// nil if none found.
func (m *SignUpRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SignUpRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := SignUpRequestValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 8 {
		err := SignUpRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 8 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetFirstName()) < 1 {
		err := SignUpRequestValidationError{
			field:  "FirstName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLastName()) < 1 {
		err := SignUpRequestValidationError{
			field:  "LastName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = SignUpRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SignUpRequestMultiError(errors)
	}

	return nil
}

func (m *SignUpRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *SignUpRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// SignUpRequestMultiError is an error wrapping multiple validation errors
// returned by SignUpRequest.ValidateAll() if the designated constraints
// aren't met.
type SignUpRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignUpRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignUpRequestMultiError) AllErrors() []error { return m }

// SignUpRequestValidationError is the validation error returned by
// SignUpRequest.Validate if the designated constraints aren't met.
type SignUpRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignUpRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignUpRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignUpRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignUpRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignUpRequestValidationError) ErrorName() string { return "SignUpRequestValidationError" }

// Error satisfies the builtin error interface
func (e SignUpRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignUpRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignUpRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignUpRequestValidationError{}

// Validate checks the field values on GetAccountInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountInfoRequestMultiError, or nil if none found.
func (m *GetAccountInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAccountInfoRequestMultiError(errors)
	}

	return nil
}

// GetAccountInfoRequestMultiError is an error wrapping multiple validation
// errors returned by GetAccountInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAccountInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountInfoRequestMultiError) AllErrors() []error { return m }

// GetAccountInfoRequestValidationError is the validation error returned by
// GetAccountInfoRequest.Validate if the designated constraints aren't met.
type GetAccountInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountInfoRequestValidationError) ErrorName() string {
	return "GetAccountInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountInfoRequestValidationError{}

// Validate checks the field values on GetAccountInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountInfoResponseMultiError, or nil if none found.
func (m *GetAccountInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAccountInfoResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAccountInfoResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAccountInfoResponseValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSetting()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAccountInfoResponseValidationError{
					field:  "Setting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAccountInfoResponseValidationError{
					field:  "Setting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSetting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAccountInfoResponseValidationError{
				field:  "Setting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MqttTopic

	if len(errors) > 0 {
		return GetAccountInfoResponseMultiError(errors)
	}

	return nil
}

// GetAccountInfoResponseMultiError is an error wrapping multiple validation
// errors returned by GetAccountInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAccountInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountInfoResponseMultiError) AllErrors() []error { return m }

// GetAccountInfoResponseValidationError is the validation error returned by
// GetAccountInfoResponse.Validate if the designated constraints aren't met.
type GetAccountInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountInfoResponseValidationError) ErrorName() string {
	return "GetAccountInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountInfoResponseValidationError{}

// Validate checks the field values on UpdateAccountInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAccountInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAccountInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAccountInfoRequestMultiError, or nil if none found.
func (m *UpdateAccountInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAccountInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Phone

	if utf8.RuneCountInString(m.GetCountry()) != 2 {
		err := UpdateAccountInfoRequestValidationError{
			field:  "Country",
			reason: "value length must be 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	// no validation rules for Company

	// no validation rules for Position

	// no validation rules for FirstName

	// no validation rules for LastName

	if len(errors) > 0 {
		return UpdateAccountInfoRequestMultiError(errors)
	}

	return nil
}

// UpdateAccountInfoRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateAccountInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateAccountInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAccountInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAccountInfoRequestMultiError) AllErrors() []error { return m }

// UpdateAccountInfoRequestValidationError is the validation error returned by
// UpdateAccountInfoRequest.Validate if the designated constraints aren't met.
type UpdateAccountInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccountInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccountInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccountInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccountInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccountInfoRequestValidationError) ErrorName() string {
	return "UpdateAccountInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAccountInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccountInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccountInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccountInfoRequestValidationError{}

// Validate checks the field values on UpdateAccountInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAccountInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAccountInfoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAccountInfoResponseMultiError, or nil if none found.
func (m *UpdateAccountInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAccountInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAccountInfoResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAccountInfoResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAccountInfoResponseValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAccountInfoResponseMultiError(errors)
	}

	return nil
}

// UpdateAccountInfoResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateAccountInfoResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateAccountInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAccountInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAccountInfoResponseMultiError) AllErrors() []error { return m }

// UpdateAccountInfoResponseValidationError is the validation error returned by
// UpdateAccountInfoResponse.Validate if the designated constraints aren't met.
type UpdateAccountInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccountInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccountInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccountInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccountInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccountInfoResponseValidationError) ErrorName() string {
	return "UpdateAccountInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAccountInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccountInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccountInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccountInfoResponseValidationError{}

// Validate checks the field values on UpdateAccountSettingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAccountSettingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAccountSettingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAccountSettingRequestMultiError, or nil if none found.
func (m *UpdateAccountSettingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAccountSettingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNotifyCreateSource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAccountSettingRequestValidationError{
					field:  "NotifyCreateSource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAccountSettingRequestValidationError{
					field:  "NotifyCreateSource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotifyCreateSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAccountSettingRequestValidationError{
				field:  "NotifyCreateSource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNotifyCreateDestination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAccountSettingRequestValidationError{
					field:  "NotifyCreateDestination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAccountSettingRequestValidationError{
					field:  "NotifyCreateDestination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotifyCreateDestination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAccountSettingRequestValidationError{
				field:  "NotifyCreateDestination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNotifyCreateMasterSegment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAccountSettingRequestValidationError{
					field:  "NotifyCreateMasterSegment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAccountSettingRequestValidationError{
					field:  "NotifyCreateMasterSegment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotifyCreateMasterSegment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAccountSettingRequestValidationError{
				field:  "NotifyCreateMasterSegment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNotifyCreateSegment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAccountSettingRequestValidationError{
					field:  "NotifyCreateSegment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAccountSettingRequestValidationError{
					field:  "NotifyCreateSegment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotifyCreateSegment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAccountSettingRequestValidationError{
				field:  "NotifyCreateSegment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAccountSettingRequestMultiError(errors)
	}

	return nil
}

// UpdateAccountSettingRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateAccountSettingRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateAccountSettingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAccountSettingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAccountSettingRequestMultiError) AllErrors() []error { return m }

// UpdateAccountSettingRequestValidationError is the validation error returned
// by UpdateAccountSettingRequest.Validate if the designated constraints
// aren't met.
type UpdateAccountSettingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccountSettingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccountSettingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccountSettingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccountSettingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccountSettingRequestValidationError) ErrorName() string {
	return "UpdateAccountSettingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAccountSettingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccountSettingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccountSettingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccountSettingRequestValidationError{}

// Validate checks the field values on UpdateAccountSettingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAccountSettingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAccountSettingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAccountSettingResponseMultiError, or nil if none found.
func (m *UpdateAccountSettingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAccountSettingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetSetting()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAccountSettingResponseValidationError{
					field:  "Setting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAccountSettingResponseValidationError{
					field:  "Setting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSetting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAccountSettingResponseValidationError{
				field:  "Setting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAccountSettingResponseMultiError(errors)
	}

	return nil
}

// UpdateAccountSettingResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateAccountSettingResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateAccountSettingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAccountSettingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAccountSettingResponseMultiError) AllErrors() []error { return m }

// UpdateAccountSettingResponseValidationError is the validation error returned
// by UpdateAccountSettingResponse.Validate if the designated constraints
// aren't met.
type UpdateAccountSettingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccountSettingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccountSettingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccountSettingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccountSettingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccountSettingResponseValidationError) ErrorName() string {
	return "UpdateAccountSettingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAccountSettingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccountSettingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccountSettingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccountSettingResponseValidationError{}

// Validate checks the field values on CommonResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CommonResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommonResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CommonResponseMultiError,
// or nil if none found.
func (m *CommonResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CommonResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return CommonResponseMultiError(errors)
	}

	return nil
}

// CommonResponseMultiError is an error wrapping multiple validation errors
// returned by CommonResponse.ValidateAll() if the designated constraints
// aren't met.
type CommonResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommonResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommonResponseMultiError) AllErrors() []error { return m }

// CommonResponseValidationError is the validation error returned by
// CommonResponse.Validate if the designated constraints aren't met.
type CommonResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommonResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommonResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommonResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommonResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommonResponseValidationError) ErrorName() string { return "CommonResponseValidationError" }

// Error satisfies the builtin error interface
func (e CommonResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommonResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommonResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommonResponseValidationError{}

// Validate checks the field values on ImportCsvRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ImportCsvRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportCsvRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportCsvRequestMultiError, or nil if none found.
func (m *ImportCsvRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportCsvRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetFileName()) < 1 {
		err := ImportCsvRequestValidationError{
			field:  "FileName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for FileSize

	for idx, item := range m.GetMappingOptions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImportCsvRequestValidationError{
						field:  fmt.Sprintf("MappingOptions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImportCsvRequestValidationError{
						field:  fmt.Sprintf("MappingOptions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportCsvRequestValidationError{
					field:  fmt.Sprintf("MappingOptions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GetConnectionId() <= -1 {
		err := ImportCsvRequestValidationError{
			field:  "ConnectionId",
			reason: "value must be greater than -1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetConfigurations()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImportCsvRequestValidationError{
					field:  "Configurations",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImportCsvRequestValidationError{
					field:  "Configurations",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfigurations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportCsvRequestValidationError{
				field:  "Configurations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for FileContent

	if m.GetTableId() <= -1 {
		err := ImportCsvRequestValidationError{
			field:  "TableId",
			reason: "value must be greater than -1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for NewTableName

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ImportCsvRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	// no validation rules for Key

	// no validation rules for WriteMode

	if len(errors) > 0 {
		return ImportCsvRequestMultiError(errors)
	}

	return nil
}

// ImportCsvRequestMultiError is an error wrapping multiple validation errors
// returned by ImportCsvRequest.ValidateAll() if the designated constraints
// aren't met.
type ImportCsvRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportCsvRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportCsvRequestMultiError) AllErrors() []error { return m }

// ImportCsvRequestValidationError is the validation error returned by
// ImportCsvRequest.Validate if the designated constraints aren't met.
type ImportCsvRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportCsvRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportCsvRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportCsvRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportCsvRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportCsvRequestValidationError) ErrorName() string { return "ImportCsvRequestValidationError" }

// Error satisfies the builtin error interface
func (e ImportCsvRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportCsvRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportCsvRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportCsvRequestValidationError{}

// Validate checks the field values on ImportCsvResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ImportCsvResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportCsvResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportCsvResponseMultiError, or nil if none found.
func (m *ImportCsvResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportCsvResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return ImportCsvResponseMultiError(errors)
	}

	return nil
}

// ImportCsvResponseMultiError is an error wrapping multiple validation errors
// returned by ImportCsvResponse.ValidateAll() if the designated constraints
// aren't met.
type ImportCsvResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportCsvResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportCsvResponseMultiError) AllErrors() []error { return m }

// ImportCsvResponseValidationError is the validation error returned by
// ImportCsvResponse.Validate if the designated constraints aren't met.
type ImportCsvResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportCsvResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportCsvResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportCsvResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportCsvResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportCsvResponseValidationError) ErrorName() string {
	return "ImportCsvResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ImportCsvResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportCsvResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportCsvResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportCsvResponseValidationError{}

// Validate checks the field values on GetListDataSourcesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetListDataSourcesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListDataSourcesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetListDataSourcesRequestMultiError, or nil if none found.
func (m *GetListDataSourcesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListDataSourcesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Name

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetListDataSourcesRequestMultiError(errors)
	}

	return nil
}

// GetListDataSourcesRequestMultiError is an error wrapping multiple validation
// errors returned by GetListDataSourcesRequest.ValidateAll() if the
// designated constraints aren't met.
type GetListDataSourcesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListDataSourcesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListDataSourcesRequestMultiError) AllErrors() []error { return m }

// GetListDataSourcesRequestValidationError is the validation error returned by
// GetListDataSourcesRequest.Validate if the designated constraints aren't met.
type GetListDataSourcesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListDataSourcesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListDataSourcesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListDataSourcesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListDataSourcesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListDataSourcesRequestValidationError) ErrorName() string {
	return "GetListDataSourcesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetListDataSourcesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListDataSourcesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListDataSourcesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListDataSourcesRequestValidationError{}

// Validate checks the field values on GetListDataSourcesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetListDataSourcesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListDataSourcesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetListDataSourcesResponseMultiError, or nil if none found.
func (m *GetListDataSourcesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListDataSourcesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Count

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetListDataSourcesResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetListDataSourcesResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetListDataSourcesResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetListDataSourcesResponseMultiError(errors)
	}

	return nil
}

// GetListDataSourcesResponseMultiError is an error wrapping multiple
// validation errors returned by GetListDataSourcesResponse.ValidateAll() if
// the designated constraints aren't met.
type GetListDataSourcesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListDataSourcesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListDataSourcesResponseMultiError) AllErrors() []error { return m }

// GetListDataSourcesResponseValidationError is the validation error returned
// by GetListDataSourcesResponse.Validate if the designated constraints aren't met.
type GetListDataSourcesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListDataSourcesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListDataSourcesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListDataSourcesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListDataSourcesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListDataSourcesResponseValidationError) ErrorName() string {
	return "GetListDataSourcesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetListDataSourcesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListDataSourcesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListDataSourcesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListDataSourcesResponseValidationError{}

// Validate checks the field values on GetDataSourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDataSourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDataSourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDataSourceRequestMultiError, or nil if none found.
func (m *GetDataSourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDataSourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetDataSourceRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetDataSourceRequestMultiError(errors)
	}

	return nil
}

// GetDataSourceRequestMultiError is an error wrapping multiple validation
// errors returned by GetDataSourceRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDataSourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDataSourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDataSourceRequestMultiError) AllErrors() []error { return m }

// GetDataSourceRequestValidationError is the validation error returned by
// GetDataSourceRequest.Validate if the designated constraints aren't met.
type GetDataSourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDataSourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDataSourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDataSourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDataSourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDataSourceRequestValidationError) ErrorName() string {
	return "GetDataSourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDataSourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDataSourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDataSourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDataSourceRequestValidationError{}

// Validate checks the field values on GetDataSourceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDataSourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDataSourceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDataSourceResponseMultiError, or nil if none found.
func (m *GetDataSourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDataSourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Description

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for Configurations

	// no validation rules for MappingOptions

	if all {
		switch v := interface{}(m.GetConnection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDataSourceResponseValidationError{
					field:  "Connection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDataSourceResponseValidationError{
					field:  "Connection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConnection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDataSourceResponseValidationError{
				field:  "Connection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDataSourceResponseMultiError(errors)
	}

	return nil
}

// GetDataSourceResponseMultiError is an error wrapping multiple validation
// errors returned by GetDataSourceResponse.ValidateAll() if the designated
// constraints aren't met.
type GetDataSourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDataSourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDataSourceResponseMultiError) AllErrors() []error { return m }

// GetDataSourceResponseValidationError is the validation error returned by
// GetDataSourceResponse.Validate if the designated constraints aren't met.
type GetDataSourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDataSourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDataSourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDataSourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDataSourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDataSourceResponseValidationError) ErrorName() string {
	return "GetDataSourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDataSourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDataSourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDataSourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDataSourceResponseValidationError{}

// Validate checks the field values on GetListDataTablesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetListDataTablesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListDataTablesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetListDataTablesRequestMultiError, or nil if none found.
func (m *GetListDataTablesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListDataTablesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetListDataTablesRequestMultiError(errors)
	}

	return nil
}

// GetListDataTablesRequestMultiError is an error wrapping multiple validation
// errors returned by GetListDataTablesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetListDataTablesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListDataTablesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListDataTablesRequestMultiError) AllErrors() []error { return m }

// GetListDataTablesRequestValidationError is the validation error returned by
// GetListDataTablesRequest.Validate if the designated constraints aren't met.
type GetListDataTablesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListDataTablesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListDataTablesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListDataTablesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListDataTablesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListDataTablesRequestValidationError) ErrorName() string {
	return "GetListDataTablesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetListDataTablesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListDataTablesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListDataTablesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListDataTablesRequestValidationError{}

// Validate checks the field values on GetListDataTablesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetListDataTablesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListDataTablesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetListDataTablesResponseMultiError, or nil if none found.
func (m *GetListDataTablesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListDataTablesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Count

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetListDataTablesResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetListDataTablesResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetListDataTablesResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetListDataTablesResponseMultiError(errors)
	}

	return nil
}

// GetListDataTablesResponseMultiError is an error wrapping multiple validation
// errors returned by GetListDataTablesResponse.ValidateAll() if the
// designated constraints aren't met.
type GetListDataTablesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListDataTablesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListDataTablesResponseMultiError) AllErrors() []error { return m }

// GetListDataTablesResponseValidationError is the validation error returned by
// GetListDataTablesResponse.Validate if the designated constraints aren't met.
type GetListDataTablesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListDataTablesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListDataTablesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListDataTablesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListDataTablesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListDataTablesResponseValidationError) ErrorName() string {
	return "GetListDataTablesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetListDataTablesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListDataTablesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListDataTablesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListDataTablesResponseValidationError{}

// Validate checks the field values on GetDataTableRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDataTableRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDataTableRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDataTableRequestMultiError, or nil if none found.
func (m *GetDataTableRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDataTableRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetDataTableRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetDataTableRequestMultiError(errors)
	}

	return nil
}

// GetDataTableRequestMultiError is an error wrapping multiple validation
// errors returned by GetDataTableRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDataTableRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDataTableRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDataTableRequestMultiError) AllErrors() []error { return m }

// GetDataTableRequestValidationError is the validation error returned by
// GetDataTableRequest.Validate if the designated constraints aren't met.
type GetDataTableRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDataTableRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDataTableRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDataTableRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDataTableRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDataTableRequestValidationError) ErrorName() string {
	return "GetDataTableRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDataTableRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDataTableRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDataTableRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDataTableRequestValidationError{}

// Validate checks the field values on GetDataTableResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDataTableResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDataTableResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDataTableResponseMultiError, or nil if none found.
func (m *GetDataTableResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDataTableResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	for idx, item := range m.GetSchema() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDataTableResponseValidationError{
						field:  fmt.Sprintf("Schema[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDataTableResponseValidationError{
						field:  fmt.Sprintf("Schema[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDataTableResponseValidationError{
					field:  fmt.Sprintf("Schema[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetDataTableResponseMultiError(errors)
	}

	return nil
}

// GetDataTableResponseMultiError is an error wrapping multiple validation
// errors returned by GetDataTableResponse.ValidateAll() if the designated
// constraints aren't met.
type GetDataTableResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDataTableResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDataTableResponseMultiError) AllErrors() []error { return m }

// GetDataTableResponseValidationError is the validation error returned by
// GetDataTableResponse.Validate if the designated constraints aren't met.
type GetDataTableResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDataTableResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDataTableResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDataTableResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDataTableResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDataTableResponseValidationError) ErrorName() string {
	return "GetDataTableResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDataTableResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDataTableResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDataTableResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDataTableResponseValidationError{}

// Validate checks the field values on GetQueryDataTableRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetQueryDataTableRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetQueryDataTableRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetQueryDataTableRequestMultiError, or nil if none found.
func (m *GetQueryDataTableRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQueryDataTableRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetQueryDataTableRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Limit

	if len(errors) > 0 {
		return GetQueryDataTableRequestMultiError(errors)
	}

	return nil
}

// GetQueryDataTableRequestMultiError is an error wrapping multiple validation
// errors returned by GetQueryDataTableRequest.ValidateAll() if the designated
// constraints aren't met.
type GetQueryDataTableRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQueryDataTableRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQueryDataTableRequestMultiError) AllErrors() []error { return m }

// GetQueryDataTableRequestValidationError is the validation error returned by
// GetQueryDataTableRequest.Validate if the designated constraints aren't met.
type GetQueryDataTableRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQueryDataTableRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQueryDataTableRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQueryDataTableRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQueryDataTableRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQueryDataTableRequestValidationError) ErrorName() string {
	return "GetQueryDataTableRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetQueryDataTableRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQueryDataTableRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQueryDataTableRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQueryDataTableRequestValidationError{}

// Validate checks the field values on GetQueryDataTableResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetQueryDataTableResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetQueryDataTableResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetQueryDataTableResponseMultiError, or nil if none found.
func (m *GetQueryDataTableResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQueryDataTableResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Count

	if len(errors) > 0 {
		return GetQueryDataTableResponseMultiError(errors)
	}

	return nil
}

// GetQueryDataTableResponseMultiError is an error wrapping multiple validation
// errors returned by GetQueryDataTableResponse.ValidateAll() if the
// designated constraints aren't met.
type GetQueryDataTableResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQueryDataTableResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQueryDataTableResponseMultiError) AllErrors() []error { return m }

// GetQueryDataTableResponseValidationError is the validation error returned by
// GetQueryDataTableResponse.Validate if the designated constraints aren't met.
type GetQueryDataTableResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQueryDataTableResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQueryDataTableResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQueryDataTableResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQueryDataTableResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQueryDataTableResponseValidationError) ErrorName() string {
	return "GetQueryDataTableResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetQueryDataTableResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQueryDataTableResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQueryDataTableResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQueryDataTableResponseValidationError{}

// Validate checks the field values on CreateConnectionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateConnectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateConnectionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateConnectionRequestMultiError, or nil if none found.
func (m *CreateConnectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateConnectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateConnectionRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetType()) < 1 {
		err := CreateConnectionRequestValidationError{
			field:  "Type",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Configurations

	if len(errors) > 0 {
		return CreateConnectionRequestMultiError(errors)
	}

	return nil
}

// CreateConnectionRequestMultiError is an error wrapping multiple validation
// errors returned by CreateConnectionRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateConnectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateConnectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateConnectionRequestMultiError) AllErrors() []error { return m }

// CreateConnectionRequestValidationError is the validation error returned by
// CreateConnectionRequest.Validate if the designated constraints aren't met.
type CreateConnectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateConnectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateConnectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateConnectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateConnectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateConnectionRequestValidationError) ErrorName() string {
	return "CreateConnectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateConnectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateConnectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateConnectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateConnectionRequestValidationError{}

// Validate checks the field values on CreateConnectionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateConnectionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateConnectionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateConnectionResponseMultiError, or nil if none found.
func (m *CreateConnectionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateConnectionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return CreateConnectionResponseMultiError(errors)
	}

	return nil
}

// CreateConnectionResponseMultiError is an error wrapping multiple validation
// errors returned by CreateConnectionResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateConnectionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateConnectionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateConnectionResponseMultiError) AllErrors() []error { return m }

// CreateConnectionResponseValidationError is the validation error returned by
// CreateConnectionResponse.Validate if the designated constraints aren't met.
type CreateConnectionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateConnectionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateConnectionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateConnectionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateConnectionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateConnectionResponseValidationError) ErrorName() string {
	return "CreateConnectionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateConnectionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateConnectionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateConnectionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateConnectionResponseValidationError{}

// Validate checks the field values on GetListConnectionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetListConnectionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListConnectionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetListConnectionsRequestMultiError, or nil if none found.
func (m *GetListConnectionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListConnectionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Name

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetListConnectionsRequestMultiError(errors)
	}

	return nil
}

// GetListConnectionsRequestMultiError is an error wrapping multiple validation
// errors returned by GetListConnectionsRequest.ValidateAll() if the
// designated constraints aren't met.
type GetListConnectionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListConnectionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListConnectionsRequestMultiError) AllErrors() []error { return m }

// GetListConnectionsRequestValidationError is the validation error returned by
// GetListConnectionsRequest.Validate if the designated constraints aren't met.
type GetListConnectionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListConnectionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListConnectionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListConnectionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListConnectionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListConnectionsRequestValidationError) ErrorName() string {
	return "GetListConnectionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetListConnectionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListConnectionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListConnectionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListConnectionsRequestValidationError{}

// Validate checks the field values on GetListConnectionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetListConnectionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListConnectionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetListConnectionsResponseMultiError, or nil if none found.
func (m *GetListConnectionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListConnectionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Count

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetListConnectionsResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetListConnectionsResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetListConnectionsResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetListConnectionsResponseMultiError(errors)
	}

	return nil
}

// GetListConnectionsResponseMultiError is an error wrapping multiple
// validation errors returned by GetListConnectionsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetListConnectionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListConnectionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListConnectionsResponseMultiError) AllErrors() []error { return m }

// GetListConnectionsResponseValidationError is the validation error returned
// by GetListConnectionsResponse.Validate if the designated constraints aren't met.
type GetListConnectionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListConnectionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListConnectionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListConnectionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListConnectionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListConnectionsResponseValidationError) ErrorName() string {
	return "GetListConnectionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetListConnectionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListConnectionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListConnectionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListConnectionsResponseValidationError{}

// Validate checks the field values on GetConnectionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConnectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConnectionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConnectionRequestMultiError, or nil if none found.
func (m *GetConnectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConnectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetConnectionRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetConnectionRequestMultiError(errors)
	}

	return nil
}

// GetConnectionRequestMultiError is an error wrapping multiple validation
// errors returned by GetConnectionRequest.ValidateAll() if the designated
// constraints aren't met.
type GetConnectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConnectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConnectionRequestMultiError) AllErrors() []error { return m }

// GetConnectionRequestValidationError is the validation error returned by
// GetConnectionRequest.Validate if the designated constraints aren't met.
type GetConnectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConnectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConnectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConnectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConnectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConnectionRequestValidationError) ErrorName() string {
	return "GetConnectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetConnectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConnectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConnectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConnectionRequestValidationError{}

// Validate checks the field values on GetConnectionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConnectionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConnectionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConnectionResponseMultiError, or nil if none found.
func (m *GetConnectionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConnectionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Configurations

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return GetConnectionResponseMultiError(errors)
	}

	return nil
}

// GetConnectionResponseMultiError is an error wrapping multiple validation
// errors returned by GetConnectionResponse.ValidateAll() if the designated
// constraints aren't met.
type GetConnectionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConnectionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConnectionResponseMultiError) AllErrors() []error { return m }

// GetConnectionResponseValidationError is the validation error returned by
// GetConnectionResponse.Validate if the designated constraints aren't met.
type GetConnectionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConnectionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConnectionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConnectionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConnectionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConnectionResponseValidationError) ErrorName() string {
	return "GetConnectionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetConnectionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConnectionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConnectionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConnectionResponseValidationError{}

// Validate checks the field values on UpdateConnectionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateConnectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateConnectionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateConnectionRequestMultiError, or nil if none found.
func (m *UpdateConnectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateConnectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateConnectionRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Configurations

	if len(errors) > 0 {
		return UpdateConnectionRequestMultiError(errors)
	}

	return nil
}

// UpdateConnectionRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateConnectionRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateConnectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateConnectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateConnectionRequestMultiError) AllErrors() []error { return m }

// UpdateConnectionRequestValidationError is the validation error returned by
// UpdateConnectionRequest.Validate if the designated constraints aren't met.
type UpdateConnectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateConnectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateConnectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateConnectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateConnectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateConnectionRequestValidationError) ErrorName() string {
	return "UpdateConnectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateConnectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateConnectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateConnectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateConnectionRequestValidationError{}

// Validate checks the field values on UpdateConnectionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateConnectionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateConnectionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateConnectionResponseMultiError, or nil if none found.
func (m *UpdateConnectionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateConnectionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateConnectionResponseMultiError(errors)
	}

	return nil
}

// UpdateConnectionResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateConnectionResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateConnectionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateConnectionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateConnectionResponseMultiError) AllErrors() []error { return m }

// UpdateConnectionResponseValidationError is the validation error returned by
// UpdateConnectionResponse.Validate if the designated constraints aren't met.
type UpdateConnectionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateConnectionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateConnectionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateConnectionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateConnectionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateConnectionResponseValidationError) ErrorName() string {
	return "UpdateConnectionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateConnectionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateConnectionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateConnectionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateConnectionResponseValidationError{}

// Validate checks the field values on DeleteConnectionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteConnectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteConnectionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteConnectionRequestMultiError, or nil if none found.
func (m *DeleteConnectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteConnectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteConnectionRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteConnectionRequestMultiError(errors)
	}

	return nil
}

// DeleteConnectionRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteConnectionRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteConnectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteConnectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteConnectionRequestMultiError) AllErrors() []error { return m }

// DeleteConnectionRequestValidationError is the validation error returned by
// DeleteConnectionRequest.Validate if the designated constraints aren't met.
type DeleteConnectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteConnectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteConnectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteConnectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteConnectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteConnectionRequestValidationError) ErrorName() string {
	return "DeleteConnectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteConnectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteConnectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteConnectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteConnectionRequestValidationError{}

// Validate checks the field values on DeleteConnectionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteConnectionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteConnectionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteConnectionResponseMultiError, or nil if none found.
func (m *DeleteConnectionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteConnectionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteConnectionResponseMultiError(errors)
	}

	return nil
}

// DeleteConnectionResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteConnectionResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteConnectionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteConnectionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteConnectionResponseMultiError) AllErrors() []error { return m }

// DeleteConnectionResponseValidationError is the validation error returned by
// DeleteConnectionResponse.Validate if the designated constraints aren't met.
type DeleteConnectionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteConnectionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteConnectionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteConnectionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteConnectionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteConnectionResponseValidationError) ErrorName() string {
	return "DeleteConnectionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteConnectionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteConnectionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteConnectionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteConnectionResponseValidationError{}

// Validate checks the field values on ExportDataToFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExportDataToFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportDataToFileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExportDataToFileRequestMultiError, or nil if none found.
func (m *ExportDataToFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportDataToFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FileName

	// no validation rules for FileType

	// no validation rules for ConnectionId

	// no validation rules for FilePath

	// no validation rules for TableId

	// no validation rules for SegmentId

	// no validation rules for MasterSegmentId

	if len(errors) > 0 {
		return ExportDataToFileRequestMultiError(errors)
	}

	return nil
}

// ExportDataToFileRequestMultiError is an error wrapping multiple validation
// errors returned by ExportDataToFileRequest.ValidateAll() if the designated
// constraints aren't met.
type ExportDataToFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportDataToFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportDataToFileRequestMultiError) AllErrors() []error { return m }

// ExportDataToFileRequestValidationError is the validation error returned by
// ExportDataToFileRequest.Validate if the designated constraints aren't met.
type ExportDataToFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportDataToFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportDataToFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportDataToFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportDataToFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportDataToFileRequestValidationError) ErrorName() string {
	return "ExportDataToFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExportDataToFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportDataToFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportDataToFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportDataToFileRequestValidationError{}

// Validate checks the field values on ExportDataToFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExportDataToFileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportDataToFileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExportDataToFileResponseMultiError, or nil if none found.
func (m *ExportDataToFileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportDataToFileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return ExportDataToFileResponseMultiError(errors)
	}

	return nil
}

// ExportDataToFileResponseMultiError is an error wrapping multiple validation
// errors returned by ExportDataToFileResponse.ValidateAll() if the designated
// constraints aren't met.
type ExportDataToFileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportDataToFileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportDataToFileResponseMultiError) AllErrors() []error { return m }

// ExportDataToFileResponseValidationError is the validation error returned by
// ExportDataToFileResponse.Validate if the designated constraints aren't met.
type ExportDataToFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportDataToFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportDataToFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportDataToFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportDataToFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportDataToFileResponseValidationError) ErrorName() string {
	return "ExportDataToFileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExportDataToFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportDataToFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportDataToFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportDataToFileResponseValidationError{}

// Validate checks the field values on GetListFileExportRecordsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetListFileExportRecordsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListFileExportRecordsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetListFileExportRecordsRequestMultiError, or nil if none found.
func (m *GetListFileExportRecordsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListFileExportRecordsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetListFileExportRecordsRequestMultiError(errors)
	}

	return nil
}

// GetListFileExportRecordsRequestMultiError is an error wrapping multiple
// validation errors returned by GetListFileExportRecordsRequest.ValidateAll()
// if the designated constraints aren't met.
type GetListFileExportRecordsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListFileExportRecordsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListFileExportRecordsRequestMultiError) AllErrors() []error { return m }

// GetListFileExportRecordsRequestValidationError is the validation error
// returned by GetListFileExportRecordsRequest.Validate if the designated
// constraints aren't met.
type GetListFileExportRecordsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListFileExportRecordsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListFileExportRecordsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListFileExportRecordsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListFileExportRecordsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListFileExportRecordsRequestValidationError) ErrorName() string {
	return "GetListFileExportRecordsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetListFileExportRecordsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListFileExportRecordsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListFileExportRecordsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListFileExportRecordsRequestValidationError{}

// Validate checks the field values on GetListFileExportRecordsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetListFileExportRecordsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListFileExportRecordsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetListFileExportRecordsResponseMultiError, or nil if none found.
func (m *GetListFileExportRecordsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListFileExportRecordsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetListFileExportRecordsResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetListFileExportRecordsResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetListFileExportRecordsResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetListFileExportRecordsResponseMultiError(errors)
	}

	return nil
}

// GetListFileExportRecordsResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetListFileExportRecordsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetListFileExportRecordsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListFileExportRecordsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListFileExportRecordsResponseMultiError) AllErrors() []error { return m }

// GetListFileExportRecordsResponseValidationError is the validation error
// returned by GetListFileExportRecordsResponse.Validate if the designated
// constraints aren't met.
type GetListFileExportRecordsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListFileExportRecordsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListFileExportRecordsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListFileExportRecordsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListFileExportRecordsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListFileExportRecordsResponseValidationError) ErrorName() string {
	return "GetListFileExportRecordsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetListFileExportRecordsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListFileExportRecordsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListFileExportRecordsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListFileExportRecordsResponseValidationError{}

// Validate checks the field values on ImportCsvFromS3Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportCsvFromS3Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportCsvFromS3Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportCsvFromS3RequestMultiError, or nil if none found.
func (m *ImportCsvFromS3Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportCsvFromS3Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetFileName()) < 1 {
		err := ImportCsvFromS3RequestValidationError{
			field:  "FileName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for WriteMode

	for idx, item := range m.GetMappingOptions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImportCsvFromS3RequestValidationError{
						field:  fmt.Sprintf("MappingOptions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImportCsvFromS3RequestValidationError{
						field:  fmt.Sprintf("MappingOptions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportCsvFromS3RequestValidationError{
					field:  fmt.Sprintf("MappingOptions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GetConnectionId() <= 0 {
		err := ImportCsvFromS3RequestValidationError{
			field:  "ConnectionId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Key

	if all {
		switch v := interface{}(m.GetConfigurations()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImportCsvFromS3RequestValidationError{
					field:  "Configurations",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImportCsvFromS3RequestValidationError{
					field:  "Configurations",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfigurations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportCsvFromS3RequestValidationError{
				field:  "Configurations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetTableId() < 0 {
		err := ImportCsvFromS3RequestValidationError{
			field:  "TableId",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for NewTableName

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ImportCsvFromS3RequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	if len(errors) > 0 {
		return ImportCsvFromS3RequestMultiError(errors)
	}

	return nil
}

// ImportCsvFromS3RequestMultiError is an error wrapping multiple validation
// errors returned by ImportCsvFromS3Request.ValidateAll() if the designated
// constraints aren't met.
type ImportCsvFromS3RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportCsvFromS3RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportCsvFromS3RequestMultiError) AllErrors() []error { return m }

// ImportCsvFromS3RequestValidationError is the validation error returned by
// ImportCsvFromS3Request.Validate if the designated constraints aren't met.
type ImportCsvFromS3RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportCsvFromS3RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportCsvFromS3RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportCsvFromS3RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportCsvFromS3RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportCsvFromS3RequestValidationError) ErrorName() string {
	return "ImportCsvFromS3RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ImportCsvFromS3RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportCsvFromS3Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportCsvFromS3RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportCsvFromS3RequestValidationError{}

// Validate checks the field values on ImportCsvFromS3Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportCsvFromS3Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportCsvFromS3Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportCsvFromS3ResponseMultiError, or nil if none found.
func (m *ImportCsvFromS3Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportCsvFromS3Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return ImportCsvFromS3ResponseMultiError(errors)
	}

	return nil
}

// ImportCsvFromS3ResponseMultiError is an error wrapping multiple validation
// errors returned by ImportCsvFromS3Response.ValidateAll() if the designated
// constraints aren't met.
type ImportCsvFromS3ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportCsvFromS3ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportCsvFromS3ResponseMultiError) AllErrors() []error { return m }

// ImportCsvFromS3ResponseValidationError is the validation error returned by
// ImportCsvFromS3Response.Validate if the designated constraints aren't met.
type ImportCsvFromS3ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportCsvFromS3ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportCsvFromS3ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportCsvFromS3ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportCsvFromS3ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportCsvFromS3ResponseValidationError) ErrorName() string {
	return "ImportCsvFromS3ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ImportCsvFromS3ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportCsvFromS3Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportCsvFromS3ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportCsvFromS3ResponseValidationError{}

// Validate checks the field values on CreateMasterSegmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMasterSegmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMasterSegmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMasterSegmentRequestMultiError, or nil if none found.
func (m *CreateMasterSegmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMasterSegmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateMasterSegmentRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	if m.GetMainTableId() <= 0 {
		err := CreateMasterSegmentRequestValidationError{
			field:  "MainTableId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetSelectedColumns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateMasterSegmentRequestValidationError{
						field:  fmt.Sprintf("SelectedColumns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateMasterSegmentRequestValidationError{
						field:  fmt.Sprintf("SelectedColumns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateMasterSegmentRequestValidationError{
					field:  fmt.Sprintf("SelectedColumns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAttributeTables() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateMasterSegmentRequestValidationError{
						field:  fmt.Sprintf("AttributeTables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateMasterSegmentRequestValidationError{
						field:  fmt.Sprintf("AttributeTables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateMasterSegmentRequestValidationError{
					field:  fmt.Sprintf("AttributeTables[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetBehaviorTables() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateMasterSegmentRequestValidationError{
						field:  fmt.Sprintf("BehaviorTables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateMasterSegmentRequestValidationError{
						field:  fmt.Sprintf("BehaviorTables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateMasterSegmentRequestValidationError{
					field:  fmt.Sprintf("BehaviorTables[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateMasterSegmentRequestMultiError(errors)
	}

	return nil
}

// CreateMasterSegmentRequestMultiError is an error wrapping multiple
// validation errors returned by CreateMasterSegmentRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateMasterSegmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMasterSegmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMasterSegmentRequestMultiError) AllErrors() []error { return m }

// CreateMasterSegmentRequestValidationError is the validation error returned
// by CreateMasterSegmentRequest.Validate if the designated constraints aren't met.
type CreateMasterSegmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMasterSegmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMasterSegmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMasterSegmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMasterSegmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMasterSegmentRequestValidationError) ErrorName() string {
	return "CreateMasterSegmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMasterSegmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMasterSegmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMasterSegmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMasterSegmentRequestValidationError{}

// Validate checks the field values on CreateMasterSegmentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMasterSegmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMasterSegmentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMasterSegmentResponseMultiError, or nil if none found.
func (m *CreateMasterSegmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMasterSegmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return CreateMasterSegmentResponseMultiError(errors)
	}

	return nil
}

// CreateMasterSegmentResponseMultiError is an error wrapping multiple
// validation errors returned by CreateMasterSegmentResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateMasterSegmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMasterSegmentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMasterSegmentResponseMultiError) AllErrors() []error { return m }

// CreateMasterSegmentResponseValidationError is the validation error returned
// by CreateMasterSegmentResponse.Validate if the designated constraints
// aren't met.
type CreateMasterSegmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMasterSegmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMasterSegmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMasterSegmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMasterSegmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMasterSegmentResponseValidationError) ErrorName() string {
	return "CreateMasterSegmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMasterSegmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMasterSegmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMasterSegmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMasterSegmentResponseValidationError{}

// Validate checks the field values on GetListMasterSegmentsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetListMasterSegmentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListMasterSegmentsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetListMasterSegmentsRequestMultiError, or nil if none found.
func (m *GetListMasterSegmentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListMasterSegmentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetListMasterSegmentsRequestMultiError(errors)
	}

	return nil
}

// GetListMasterSegmentsRequestMultiError is an error wrapping multiple
// validation errors returned by GetListMasterSegmentsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetListMasterSegmentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListMasterSegmentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListMasterSegmentsRequestMultiError) AllErrors() []error { return m }

// GetListMasterSegmentsRequestValidationError is the validation error returned
// by GetListMasterSegmentsRequest.Validate if the designated constraints
// aren't met.
type GetListMasterSegmentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListMasterSegmentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListMasterSegmentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListMasterSegmentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListMasterSegmentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListMasterSegmentsRequestValidationError) ErrorName() string {
	return "GetListMasterSegmentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetListMasterSegmentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListMasterSegmentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListMasterSegmentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListMasterSegmentsRequestValidationError{}

// Validate checks the field values on GetListMasterSegmentsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetListMasterSegmentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListMasterSegmentsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetListMasterSegmentsResponseMultiError, or nil if none found.
func (m *GetListMasterSegmentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListMasterSegmentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Count

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetListMasterSegmentsResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetListMasterSegmentsResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetListMasterSegmentsResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetListMasterSegmentsResponseMultiError(errors)
	}

	return nil
}

// GetListMasterSegmentsResponseMultiError is an error wrapping multiple
// validation errors returned by GetListMasterSegmentsResponse.ValidateAll()
// if the designated constraints aren't met.
type GetListMasterSegmentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListMasterSegmentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListMasterSegmentsResponseMultiError) AllErrors() []error { return m }

// GetListMasterSegmentsResponseValidationError is the validation error
// returned by GetListMasterSegmentsResponse.Validate if the designated
// constraints aren't met.
type GetListMasterSegmentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListMasterSegmentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListMasterSegmentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListMasterSegmentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListMasterSegmentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListMasterSegmentsResponseValidationError) ErrorName() string {
	return "GetListMasterSegmentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetListMasterSegmentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListMasterSegmentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListMasterSegmentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListMasterSegmentsResponseValidationError{}

// Validate checks the field values on GetMasterSegmentDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMasterSegmentDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMasterSegmentDetailRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetMasterSegmentDetailRequestMultiError, or nil if none found.
func (m *GetMasterSegmentDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMasterSegmentDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetMasterSegmentDetailRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetMasterSegmentDetailRequestMultiError(errors)
	}

	return nil
}

// GetMasterSegmentDetailRequestMultiError is an error wrapping multiple
// validation errors returned by GetMasterSegmentDetailRequest.ValidateAll()
// if the designated constraints aren't met.
type GetMasterSegmentDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMasterSegmentDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMasterSegmentDetailRequestMultiError) AllErrors() []error { return m }

// GetMasterSegmentDetailRequestValidationError is the validation error
// returned by GetMasterSegmentDetailRequest.Validate if the designated
// constraints aren't met.
type GetMasterSegmentDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMasterSegmentDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMasterSegmentDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMasterSegmentDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMasterSegmentDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMasterSegmentDetailRequestValidationError) ErrorName() string {
	return "GetMasterSegmentDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMasterSegmentDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMasterSegmentDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMasterSegmentDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMasterSegmentDetailRequestValidationError{}

// Validate checks the field values on GetMasterSegmentDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMasterSegmentDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMasterSegmentDetailResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetMasterSegmentDetailResponseMultiError, or nil if none found.
func (m *GetMasterSegmentDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMasterSegmentDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Status

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for AudienceTableId

	// no validation rules for MainRawTableId

	// no validation rules for MainRawTableName

	for idx, item := range m.GetAttributeTables() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMasterSegmentDetailResponseValidationError{
						field:  fmt.Sprintf("AttributeTables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMasterSegmentDetailResponseValidationError{
						field:  fmt.Sprintf("AttributeTables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMasterSegmentDetailResponseValidationError{
					field:  fmt.Sprintf("AttributeTables[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetBehaviorTables() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMasterSegmentDetailResponseValidationError{
						field:  fmt.Sprintf("BehaviorTables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMasterSegmentDetailResponseValidationError{
						field:  fmt.Sprintf("BehaviorTables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMasterSegmentDetailResponseValidationError{
					field:  fmt.Sprintf("BehaviorTables[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAudienceSchema() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMasterSegmentDetailResponseValidationError{
						field:  fmt.Sprintf("AudienceSchema[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMasterSegmentDetailResponseValidationError{
						field:  fmt.Sprintf("AudienceSchema[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMasterSegmentDetailResponseValidationError{
					field:  fmt.Sprintf("AudienceSchema[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetMasterSegmentDetailResponseMultiError(errors)
	}

	return nil
}

// GetMasterSegmentDetailResponseMultiError is an error wrapping multiple
// validation errors returned by GetMasterSegmentDetailResponse.ValidateAll()
// if the designated constraints aren't met.
type GetMasterSegmentDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMasterSegmentDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMasterSegmentDetailResponseMultiError) AllErrors() []error { return m }

// GetMasterSegmentDetailResponseValidationError is the validation error
// returned by GetMasterSegmentDetailResponse.Validate if the designated
// constraints aren't met.
type GetMasterSegmentDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMasterSegmentDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMasterSegmentDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMasterSegmentDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMasterSegmentDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMasterSegmentDetailResponseValidationError) ErrorName() string {
	return "GetMasterSegmentDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMasterSegmentDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMasterSegmentDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMasterSegmentDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMasterSegmentDetailResponseValidationError{}

// Validate checks the field values on CreateSegmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSegmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSegmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSegmentRequestMultiError, or nil if none found.
func (m *CreateSegmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSegmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetMasterSegmentId() <= 0 {
		err := CreateSegmentRequestValidationError{
			field:  "MasterSegmentId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateSegmentRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetCondition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSegmentRequestValidationError{
					field:  "Condition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSegmentRequestValidationError{
					field:  "Condition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCondition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSegmentRequestValidationError{
				field:  "Condition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SqlCondition

	for idx, item := range m.GetBehaviorConditions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateSegmentRequestValidationError{
						field:  fmt.Sprintf("BehaviorConditions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateSegmentRequestValidationError{
						field:  fmt.Sprintf("BehaviorConditions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateSegmentRequestValidationError{
					field:  fmt.Sprintf("BehaviorConditions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateSegmentRequestMultiError(errors)
	}

	return nil
}

// CreateSegmentRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSegmentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSegmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSegmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSegmentRequestMultiError) AllErrors() []error { return m }

// CreateSegmentRequestValidationError is the validation error returned by
// CreateSegmentRequest.Validate if the designated constraints aren't met.
type CreateSegmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSegmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSegmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSegmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSegmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSegmentRequestValidationError) ErrorName() string {
	return "CreateSegmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSegmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSegmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSegmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSegmentRequestValidationError{}

// Validate checks the field values on CreateSegmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSegmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSegmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSegmentResponseMultiError, or nil if none found.
func (m *CreateSegmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSegmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return CreateSegmentResponseMultiError(errors)
	}

	return nil
}

// CreateSegmentResponseMultiError is an error wrapping multiple validation
// errors returned by CreateSegmentResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateSegmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSegmentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSegmentResponseMultiError) AllErrors() []error { return m }

// CreateSegmentResponseValidationError is the validation error returned by
// CreateSegmentResponse.Validate if the designated constraints aren't met.
type CreateSegmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSegmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSegmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSegmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSegmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSegmentResponseValidationError) ErrorName() string {
	return "CreateSegmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSegmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSegmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSegmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSegmentResponseValidationError{}

// Validate checks the field values on GetListSegmentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetListSegmentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListSegmentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetListSegmentsRequestMultiError, or nil if none found.
func (m *GetListSegmentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListSegmentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetListSegmentsRequestMultiError(errors)
	}

	return nil
}

// GetListSegmentsRequestMultiError is an error wrapping multiple validation
// errors returned by GetListSegmentsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetListSegmentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListSegmentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListSegmentsRequestMultiError) AllErrors() []error { return m }

// GetListSegmentsRequestValidationError is the validation error returned by
// GetListSegmentsRequest.Validate if the designated constraints aren't met.
type GetListSegmentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListSegmentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListSegmentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListSegmentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListSegmentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListSegmentsRequestValidationError) ErrorName() string {
	return "GetListSegmentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetListSegmentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListSegmentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListSegmentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListSegmentsRequestValidationError{}

// Validate checks the field values on GetListSegmentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetListSegmentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListSegmentsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetListSegmentsResponseMultiError, or nil if none found.
func (m *GetListSegmentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListSegmentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Count

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetListSegmentsResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetListSegmentsResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetListSegmentsResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetListSegmentsResponseMultiError(errors)
	}

	return nil
}

// GetListSegmentsResponseMultiError is an error wrapping multiple validation
// errors returned by GetListSegmentsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetListSegmentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListSegmentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListSegmentsResponseMultiError) AllErrors() []error { return m }

// GetListSegmentsResponseValidationError is the validation error returned by
// GetListSegmentsResponse.Validate if the designated constraints aren't met.
type GetListSegmentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListSegmentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListSegmentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListSegmentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListSegmentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListSegmentsResponseValidationError) ErrorName() string {
	return "GetListSegmentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetListSegmentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListSegmentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListSegmentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListSegmentsResponseValidationError{}

// Validate checks the field values on GetSegmentDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSegmentDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSegmentDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSegmentDetailRequestMultiError, or nil if none found.
func (m *GetSegmentDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSegmentDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetSegmentDetailRequestMultiError(errors)
	}

	return nil
}

// GetSegmentDetailRequestMultiError is an error wrapping multiple validation
// errors returned by GetSegmentDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSegmentDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSegmentDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSegmentDetailRequestMultiError) AllErrors() []error { return m }

// GetSegmentDetailRequestValidationError is the validation error returned by
// GetSegmentDetailRequest.Validate if the designated constraints aren't met.
type GetSegmentDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSegmentDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSegmentDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSegmentDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSegmentDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSegmentDetailRequestValidationError) ErrorName() string {
	return "GetSegmentDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSegmentDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSegmentDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSegmentDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSegmentDetailRequestValidationError{}

// Validate checks the field values on GetSegmentDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSegmentDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSegmentDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSegmentDetailResponseMultiError, or nil if none found.
func (m *GetSegmentDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSegmentDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for MasterSegmentId

	// no validation rules for MasterSegmentName

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if all {
		switch v := interface{}(m.GetCondition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSegmentDetailResponseValidationError{
					field:  "Condition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSegmentDetailResponseValidationError{
					field:  "Condition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCondition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSegmentDetailResponseValidationError{
				field:  "Condition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSchema() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSegmentDetailResponseValidationError{
						field:  fmt.Sprintf("Schema[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSegmentDetailResponseValidationError{
						field:  fmt.Sprintf("Schema[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSegmentDetailResponseValidationError{
					field:  fmt.Sprintf("Schema[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSegmentDetailResponseMultiError(errors)
	}

	return nil
}

// GetSegmentDetailResponseMultiError is an error wrapping multiple validation
// errors returned by GetSegmentDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSegmentDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSegmentDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSegmentDetailResponseMultiError) AllErrors() []error { return m }

// GetSegmentDetailResponseValidationError is the validation error returned by
// GetSegmentDetailResponse.Validate if the designated constraints aren't met.
type GetSegmentDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSegmentDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSegmentDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSegmentDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSegmentDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSegmentDetailResponseValidationError) ErrorName() string {
	return "GetSegmentDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSegmentDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSegmentDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSegmentDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSegmentDetailResponseValidationError{}

// Validate checks the field values on CreateGophishUserGroupFromSegmentRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateGophishUserGroupFromSegmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateGophishUserGroupFromSegmentRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateGophishUserGroupFromSegmentRequestMultiError, or nil if none found.
func (m *CreateGophishUserGroupFromSegmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGophishUserGroupFromSegmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSegmentId() <= 0 {
		err := CreateGophishUserGroupFromSegmentRequestValidationError{
			field:  "SegmentId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetConnectionId() <= 0 {
		err := CreateGophishUserGroupFromSegmentRequestValidationError{
			field:  "ConnectionId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateGophishUserGroupFromSegmentRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMapping()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateGophishUserGroupFromSegmentRequestValidationError{
					field:  "Mapping",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateGophishUserGroupFromSegmentRequestValidationError{
					field:  "Mapping",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMapping()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateGophishUserGroupFromSegmentRequestValidationError{
				field:  "Mapping",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateGophishUserGroupFromSegmentRequestMultiError(errors)
	}

	return nil
}

// CreateGophishUserGroupFromSegmentRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateGophishUserGroupFromSegmentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateGophishUserGroupFromSegmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGophishUserGroupFromSegmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGophishUserGroupFromSegmentRequestMultiError) AllErrors() []error { return m }

// CreateGophishUserGroupFromSegmentRequestValidationError is the validation
// error returned by CreateGophishUserGroupFromSegmentRequest.Validate if the
// designated constraints aren't met.
type CreateGophishUserGroupFromSegmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGophishUserGroupFromSegmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGophishUserGroupFromSegmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGophishUserGroupFromSegmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGophishUserGroupFromSegmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGophishUserGroupFromSegmentRequestValidationError) ErrorName() string {
	return "CreateGophishUserGroupFromSegmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGophishUserGroupFromSegmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGophishUserGroupFromSegmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGophishUserGroupFromSegmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGophishUserGroupFromSegmentRequestValidationError{}

// Validate checks the field values on
// CreateGophishUserGroupFromSegmentResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateGophishUserGroupFromSegmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateGophishUserGroupFromSegmentResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateGophishUserGroupFromSegmentResponseMultiError, or nil if none found.
func (m *CreateGophishUserGroupFromSegmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGophishUserGroupFromSegmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return CreateGophishUserGroupFromSegmentResponseMultiError(errors)
	}

	return nil
}

// CreateGophishUserGroupFromSegmentResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateGophishUserGroupFromSegmentResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateGophishUserGroupFromSegmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGophishUserGroupFromSegmentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGophishUserGroupFromSegmentResponseMultiError) AllErrors() []error { return m }

// CreateGophishUserGroupFromSegmentResponseValidationError is the validation
// error returned by CreateGophishUserGroupFromSegmentResponse.Validate if the
// designated constraints aren't met.
type CreateGophishUserGroupFromSegmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGophishUserGroupFromSegmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGophishUserGroupFromSegmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGophishUserGroupFromSegmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGophishUserGroupFromSegmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGophishUserGroupFromSegmentResponseValidationError) ErrorName() string {
	return "CreateGophishUserGroupFromSegmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGophishUserGroupFromSegmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGophishUserGroupFromSegmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGophishUserGroupFromSegmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGophishUserGroupFromSegmentResponseValidationError{}

// Validate checks the field values on ImportFromMySQLSourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportFromMySQLSourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportFromMySQLSourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportFromMySQLSourceRequestMultiError, or nil if none found.
func (m *ImportFromMySQLSourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportFromMySQLSourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ImportFromMySQLSourceRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	if m.GetConnectionId() <= 0 {
		err := ImportFromMySQLSourceRequestValidationError{
			field:  "ConnectionId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSourceTableName()) < 1 {
		err := ImportFromMySQLSourceRequestValidationError{
			field:  "SourceTableName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for DeltaTableName

	if m.GetDeltaTableId() < 0 {
		err := ImportFromMySQLSourceRequestValidationError{
			field:  "DeltaTableId",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for WriteMode

	if len(m.GetMappingOptions()) < 1 {
		err := ImportFromMySQLSourceRequestValidationError{
			field:  "MappingOptions",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetMappingOptions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImportFromMySQLSourceRequestValidationError{
						field:  fmt.Sprintf("MappingOptions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImportFromMySQLSourceRequestValidationError{
						field:  fmt.Sprintf("MappingOptions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportFromMySQLSourceRequestValidationError{
					field:  fmt.Sprintf("MappingOptions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ImportFromMySQLSourceRequestMultiError(errors)
	}

	return nil
}

// ImportFromMySQLSourceRequestMultiError is an error wrapping multiple
// validation errors returned by ImportFromMySQLSourceRequest.ValidateAll() if
// the designated constraints aren't met.
type ImportFromMySQLSourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportFromMySQLSourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportFromMySQLSourceRequestMultiError) AllErrors() []error { return m }

// ImportFromMySQLSourceRequestValidationError is the validation error returned
// by ImportFromMySQLSourceRequest.Validate if the designated constraints
// aren't met.
type ImportFromMySQLSourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportFromMySQLSourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportFromMySQLSourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportFromMySQLSourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportFromMySQLSourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportFromMySQLSourceRequestValidationError) ErrorName() string {
	return "ImportFromMySQLSourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ImportFromMySQLSourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportFromMySQLSourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportFromMySQLSourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportFromMySQLSourceRequestValidationError{}

// Validate checks the field values on ImportFromMySQLSourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportFromMySQLSourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportFromMySQLSourceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ImportFromMySQLSourceResponseMultiError, or nil if none found.
func (m *ImportFromMySQLSourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportFromMySQLSourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return ImportFromMySQLSourceResponseMultiError(errors)
	}

	return nil
}

// ImportFromMySQLSourceResponseMultiError is an error wrapping multiple
// validation errors returned by ImportFromMySQLSourceResponse.ValidateAll()
// if the designated constraints aren't met.
type ImportFromMySQLSourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportFromMySQLSourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportFromMySQLSourceResponseMultiError) AllErrors() []error { return m }

// ImportFromMySQLSourceResponseValidationError is the validation error
// returned by ImportFromMySQLSourceResponse.Validate if the designated
// constraints aren't met.
type ImportFromMySQLSourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportFromMySQLSourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportFromMySQLSourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportFromMySQLSourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportFromMySQLSourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportFromMySQLSourceResponseValidationError) ErrorName() string {
	return "ImportFromMySQLSourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ImportFromMySQLSourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportFromMySQLSourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportFromMySQLSourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportFromMySQLSourceResponseValidationError{}

// Validate checks the field values on ExportToMySQLDestinationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExportToMySQLDestinationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportToMySQLDestinationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ExportToMySQLDestinationRequestMultiError, or nil if none found.
func (m *ExportToMySQLDestinationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportToMySQLDestinationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DataTableId

	// no validation rules for MasterSegmentId

	// no validation rules for SegmentId

	if m.GetConnectionId() <= 0 {
		err := ExportToMySQLDestinationRequestValidationError{
			field:  "ConnectionId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDestinationTableName()) < 1 {
		err := ExportToMySQLDestinationRequestValidationError{
			field:  "DestinationTableName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ExportToMySQLDestinationRequestMultiError(errors)
	}

	return nil
}

// ExportToMySQLDestinationRequestMultiError is an error wrapping multiple
// validation errors returned by ExportToMySQLDestinationRequest.ValidateAll()
// if the designated constraints aren't met.
type ExportToMySQLDestinationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportToMySQLDestinationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportToMySQLDestinationRequestMultiError) AllErrors() []error { return m }

// ExportToMySQLDestinationRequestValidationError is the validation error
// returned by ExportToMySQLDestinationRequest.Validate if the designated
// constraints aren't met.
type ExportToMySQLDestinationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportToMySQLDestinationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportToMySQLDestinationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportToMySQLDestinationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportToMySQLDestinationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportToMySQLDestinationRequestValidationError) ErrorName() string {
	return "ExportToMySQLDestinationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExportToMySQLDestinationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportToMySQLDestinationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportToMySQLDestinationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportToMySQLDestinationRequestValidationError{}

// Validate checks the field values on ExportToMySQLDestinationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ExportToMySQLDestinationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportToMySQLDestinationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ExportToMySQLDestinationResponseMultiError, or nil if none found.
func (m *ExportToMySQLDestinationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportToMySQLDestinationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return ExportToMySQLDestinationResponseMultiError(errors)
	}

	return nil
}

// ExportToMySQLDestinationResponseMultiError is an error wrapping multiple
// validation errors returned by
// ExportToMySQLDestinationResponse.ValidateAll() if the designated
// constraints aren't met.
type ExportToMySQLDestinationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportToMySQLDestinationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportToMySQLDestinationResponseMultiError) AllErrors() []error { return m }

// ExportToMySQLDestinationResponseValidationError is the validation error
// returned by ExportToMySQLDestinationResponse.Validate if the designated
// constraints aren't met.
type ExportToMySQLDestinationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportToMySQLDestinationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportToMySQLDestinationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportToMySQLDestinationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportToMySQLDestinationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportToMySQLDestinationResponseValidationError) ErrorName() string {
	return "ExportToMySQLDestinationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExportToMySQLDestinationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportToMySQLDestinationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportToMySQLDestinationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportToMySQLDestinationResponseValidationError{}

// Validate checks the field values on GetListDataDestinationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetListDataDestinationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListDataDestinationsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetListDataDestinationsRequestMultiError, or nil if none found.
func (m *GetListDataDestinationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListDataDestinationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Type

	if len(errors) > 0 {
		return GetListDataDestinationsRequestMultiError(errors)
	}

	return nil
}

// GetListDataDestinationsRequestMultiError is an error wrapping multiple
// validation errors returned by GetListDataDestinationsRequest.ValidateAll()
// if the designated constraints aren't met.
type GetListDataDestinationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListDataDestinationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListDataDestinationsRequestMultiError) AllErrors() []error { return m }

// GetListDataDestinationsRequestValidationError is the validation error
// returned by GetListDataDestinationsRequest.Validate if the designated
// constraints aren't met.
type GetListDataDestinationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListDataDestinationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListDataDestinationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListDataDestinationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListDataDestinationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListDataDestinationsRequestValidationError) ErrorName() string {
	return "GetListDataDestinationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetListDataDestinationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListDataDestinationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListDataDestinationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListDataDestinationsRequestValidationError{}

// Validate checks the field values on GetListDataDestinationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetListDataDestinationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListDataDestinationsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetListDataDestinationsResponseMultiError, or nil if none found.
func (m *GetListDataDestinationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListDataDestinationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Count

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetListDataDestinationsResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetListDataDestinationsResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetListDataDestinationsResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetListDataDestinationsResponseMultiError(errors)
	}

	return nil
}

// GetListDataDestinationsResponseMultiError is an error wrapping multiple
// validation errors returned by GetListDataDestinationsResponse.ValidateAll()
// if the designated constraints aren't met.
type GetListDataDestinationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListDataDestinationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListDataDestinationsResponseMultiError) AllErrors() []error { return m }

// GetListDataDestinationsResponseValidationError is the validation error
// returned by GetListDataDestinationsResponse.Validate if the designated
// constraints aren't met.
type GetListDataDestinationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListDataDestinationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListDataDestinationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListDataDestinationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListDataDestinationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListDataDestinationsResponseValidationError) ErrorName() string {
	return "GetListDataDestinationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetListDataDestinationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListDataDestinationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListDataDestinationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListDataDestinationsResponseValidationError{}

// Validate checks the field values on GetListDataActionRunsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetListDataActionRunsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListDataActionRunsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetListDataActionRunsRequestMultiError, or nil if none found.
func (m *GetListDataActionRunsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListDataActionRunsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetListDataActionRunsRequestMultiError(errors)
	}

	return nil
}

// GetListDataActionRunsRequestMultiError is an error wrapping multiple
// validation errors returned by GetListDataActionRunsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetListDataActionRunsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListDataActionRunsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListDataActionRunsRequestMultiError) AllErrors() []error { return m }

// GetListDataActionRunsRequestValidationError is the validation error returned
// by GetListDataActionRunsRequest.Validate if the designated constraints
// aren't met.
type GetListDataActionRunsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListDataActionRunsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListDataActionRunsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListDataActionRunsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListDataActionRunsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListDataActionRunsRequestValidationError) ErrorName() string {
	return "GetListDataActionRunsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetListDataActionRunsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListDataActionRunsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListDataActionRunsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListDataActionRunsRequestValidationError{}

// Validate checks the field values on GetListDataActionRunsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetListDataActionRunsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListDataActionRunsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetListDataActionRunsResponseMultiError, or nil if none found.
func (m *GetListDataActionRunsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListDataActionRunsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Count

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetListDataActionRunsResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetListDataActionRunsResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetListDataActionRunsResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetListDataActionRunsResponseMultiError(errors)
	}

	return nil
}

// GetListDataActionRunsResponseMultiError is an error wrapping multiple
// validation errors returned by GetListDataActionRunsResponse.ValidateAll()
// if the designated constraints aren't met.
type GetListDataActionRunsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListDataActionRunsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListDataActionRunsResponseMultiError) AllErrors() []error { return m }

// GetListDataActionRunsResponseValidationError is the validation error
// returned by GetListDataActionRunsResponse.Validate if the designated
// constraints aren't met.
type GetListDataActionRunsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListDataActionRunsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListDataActionRunsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListDataActionRunsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListDataActionRunsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListDataActionRunsResponseValidationError) ErrorName() string {
	return "GetListDataActionRunsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetListDataActionRunsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListDataActionRunsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListDataActionRunsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListDataActionRunsResponseValidationError{}

// Validate checks the field values on TrainPredictModelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TrainPredictModelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrainPredictModelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TrainPredictModelRequestMultiError, or nil if none found.
func (m *TrainPredictModelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TrainPredictModelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := TrainPredictModelRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMasterSegmentId() <= 0 {
		err := TrainPredictModelRequestValidationError{
			field:  "MasterSegmentId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TrainPredictModelRequestMultiError(errors)
	}

	return nil
}

// TrainPredictModelRequestMultiError is an error wrapping multiple validation
// errors returned by TrainPredictModelRequest.ValidateAll() if the designated
// constraints aren't met.
type TrainPredictModelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrainPredictModelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrainPredictModelRequestMultiError) AllErrors() []error { return m }

// TrainPredictModelRequestValidationError is the validation error returned by
// TrainPredictModelRequest.Validate if the designated constraints aren't met.
type TrainPredictModelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrainPredictModelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrainPredictModelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrainPredictModelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrainPredictModelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrainPredictModelRequestValidationError) ErrorName() string {
	return "TrainPredictModelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TrainPredictModelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrainPredictModelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrainPredictModelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrainPredictModelRequestValidationError{}

// Validate checks the field values on TrainPredictModelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TrainPredictModelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrainPredictModelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TrainPredictModelResponseMultiError, or nil if none found.
func (m *TrainPredictModelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TrainPredictModelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return TrainPredictModelResponseMultiError(errors)
	}

	return nil
}

// TrainPredictModelResponseMultiError is an error wrapping multiple validation
// errors returned by TrainPredictModelResponse.ValidateAll() if the
// designated constraints aren't met.
type TrainPredictModelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrainPredictModelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrainPredictModelResponseMultiError) AllErrors() []error { return m }

// TrainPredictModelResponseValidationError is the validation error returned by
// TrainPredictModelResponse.Validate if the designated constraints aren't met.
type TrainPredictModelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrainPredictModelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrainPredictModelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrainPredictModelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrainPredictModelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrainPredictModelResponseValidationError) ErrorName() string {
	return "TrainPredictModelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TrainPredictModelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrainPredictModelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrainPredictModelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrainPredictModelResponseValidationError{}

// Validate checks the field values on GetListPredictModelsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetListPredictModelsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListPredictModelsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetListPredictModelsRequestMultiError, or nil if none found.
func (m *GetListPredictModelsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListPredictModelsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	if m.GetMasterSegmentId() <= 0 {
		err := GetListPredictModelsRequestValidationError{
			field:  "MasterSegmentId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for NotAppliedSegmentId

	if len(errors) > 0 {
		return GetListPredictModelsRequestMultiError(errors)
	}

	return nil
}

// GetListPredictModelsRequestMultiError is an error wrapping multiple
// validation errors returned by GetListPredictModelsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetListPredictModelsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListPredictModelsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListPredictModelsRequestMultiError) AllErrors() []error { return m }

// GetListPredictModelsRequestValidationError is the validation error returned
// by GetListPredictModelsRequest.Validate if the designated constraints
// aren't met.
type GetListPredictModelsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListPredictModelsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListPredictModelsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListPredictModelsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListPredictModelsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListPredictModelsRequestValidationError) ErrorName() string {
	return "GetListPredictModelsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetListPredictModelsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListPredictModelsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListPredictModelsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListPredictModelsRequestValidationError{}

// Validate checks the field values on GetListPredictModelsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetListPredictModelsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListPredictModelsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetListPredictModelsResponseMultiError, or nil if none found.
func (m *GetListPredictModelsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListPredictModelsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Count

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetListPredictModelsResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetListPredictModelsResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetListPredictModelsResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetListPredictModelsResponseMultiError(errors)
	}

	return nil
}

// GetListPredictModelsResponseMultiError is an error wrapping multiple
// validation errors returned by GetListPredictModelsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetListPredictModelsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListPredictModelsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListPredictModelsResponseMultiError) AllErrors() []error { return m }

// GetListPredictModelsResponseValidationError is the validation error returned
// by GetListPredictModelsResponse.Validate if the designated constraints
// aren't met.
type GetListPredictModelsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListPredictModelsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListPredictModelsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListPredictModelsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListPredictModelsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListPredictModelsResponseValidationError) ErrorName() string {
	return "GetListPredictModelsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetListPredictModelsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListPredictModelsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListPredictModelsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListPredictModelsResponseValidationError{}

// Validate checks the field values on GetListSourceTableMapRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetListSourceTableMapRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListSourceTableMapRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetListSourceTableMapRequestMultiError, or nil if none found.
func (m *GetListSourceTableMapRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListSourceTableMapRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TableId

	// no validation rules for DataSourceId

	if len(errors) > 0 {
		return GetListSourceTableMapRequestMultiError(errors)
	}

	return nil
}

// GetListSourceTableMapRequestMultiError is an error wrapping multiple
// validation errors returned by GetListSourceTableMapRequest.ValidateAll() if
// the designated constraints aren't met.
type GetListSourceTableMapRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListSourceTableMapRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListSourceTableMapRequestMultiError) AllErrors() []error { return m }

// GetListSourceTableMapRequestValidationError is the validation error returned
// by GetListSourceTableMapRequest.Validate if the designated constraints
// aren't met.
type GetListSourceTableMapRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListSourceTableMapRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListSourceTableMapRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListSourceTableMapRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListSourceTableMapRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListSourceTableMapRequestValidationError) ErrorName() string {
	return "GetListSourceTableMapRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetListSourceTableMapRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListSourceTableMapRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListSourceTableMapRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListSourceTableMapRequestValidationError{}

// Validate checks the field values on GetListSourceTableMapResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetListSourceTableMapResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListSourceTableMapResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetListSourceTableMapResponseMultiError, or nil if none found.
func (m *GetListSourceTableMapResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListSourceTableMapResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Count

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetListSourceTableMapResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetListSourceTableMapResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetListSourceTableMapResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetListSourceTableMapResponseMultiError(errors)
	}

	return nil
}

// GetListSourceTableMapResponseMultiError is an error wrapping multiple
// validation errors returned by GetListSourceTableMapResponse.ValidateAll()
// if the designated constraints aren't met.
type GetListSourceTableMapResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListSourceTableMapResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListSourceTableMapResponseMultiError) AllErrors() []error { return m }

// GetListSourceTableMapResponseValidationError is the validation error
// returned by GetListSourceTableMapResponse.Validate if the designated
// constraints aren't met.
type GetListSourceTableMapResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListSourceTableMapResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListSourceTableMapResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListSourceTableMapResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListSourceTableMapResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListSourceTableMapResponseValidationError) ErrorName() string {
	return "GetListSourceTableMapResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetListSourceTableMapResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListSourceTableMapResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListSourceTableMapResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListSourceTableMapResponseValidationError{}

// Validate checks the field values on GetDataDestinationDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDataDestinationDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDataDestinationDetailRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetDataDestinationDetailRequestMultiError, or nil if none found.
func (m *GetDataDestinationDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDataDestinationDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetDataDestinationDetailRequestMultiError(errors)
	}

	return nil
}

// GetDataDestinationDetailRequestMultiError is an error wrapping multiple
// validation errors returned by GetDataDestinationDetailRequest.ValidateAll()
// if the designated constraints aren't met.
type GetDataDestinationDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDataDestinationDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDataDestinationDetailRequestMultiError) AllErrors() []error { return m }

// GetDataDestinationDetailRequestValidationError is the validation error
// returned by GetDataDestinationDetailRequest.Validate if the designated
// constraints aren't met.
type GetDataDestinationDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDataDestinationDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDataDestinationDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDataDestinationDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDataDestinationDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDataDestinationDetailRequestValidationError) ErrorName() string {
	return "GetDataDestinationDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDataDestinationDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDataDestinationDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDataDestinationDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDataDestinationDetailRequestValidationError{}

// Validate checks the field values on GetDataDestinationDetailResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetDataDestinationDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDataDestinationDetailResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetDataDestinationDetailResponseMultiError, or nil if none found.
func (m *GetDataDestinationDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDataDestinationDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetConnection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDataDestinationDetailResponseValidationError{
					field:  "Connection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDataDestinationDetailResponseValidationError{
					field:  "Connection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConnection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDataDestinationDetailResponseValidationError{
				field:  "Connection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Configurations

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return GetDataDestinationDetailResponseMultiError(errors)
	}

	return nil
}

// GetDataDestinationDetailResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetDataDestinationDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type GetDataDestinationDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDataDestinationDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDataDestinationDetailResponseMultiError) AllErrors() []error { return m }

// GetDataDestinationDetailResponseValidationError is the validation error
// returned by GetDataDestinationDetailResponse.Validate if the designated
// constraints aren't met.
type GetDataDestinationDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDataDestinationDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDataDestinationDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDataDestinationDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDataDestinationDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDataDestinationDetailResponseValidationError) ErrorName() string {
	return "GetDataDestinationDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDataDestinationDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDataDestinationDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDataDestinationDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDataDestinationDetailResponseValidationError{}

// Validate checks the field values on GetPredictModelDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPredictModelDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPredictModelDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPredictModelDetailRequestMultiError, or nil if none found.
func (m *GetPredictModelDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPredictModelDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetPredictModelDetailRequestMultiError(errors)
	}

	return nil
}

// GetPredictModelDetailRequestMultiError is an error wrapping multiple
// validation errors returned by GetPredictModelDetailRequest.ValidateAll() if
// the designated constraints aren't met.
type GetPredictModelDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPredictModelDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPredictModelDetailRequestMultiError) AllErrors() []error { return m }

// GetPredictModelDetailRequestValidationError is the validation error returned
// by GetPredictModelDetailRequest.Validate if the designated constraints
// aren't met.
type GetPredictModelDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPredictModelDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPredictModelDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPredictModelDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPredictModelDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPredictModelDetailRequestValidationError) ErrorName() string {
	return "GetPredictModelDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPredictModelDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPredictModelDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPredictModelDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPredictModelDetailRequestValidationError{}

// Validate checks the field values on GetPredictModelDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPredictModelDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPredictModelDetailResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPredictModelDetailResponseMultiError, or nil if none found.
func (m *GetPredictModelDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPredictModelDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Id

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetMasterSegment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPredictModelDetailResponseValidationError{
					field:  "MasterSegment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPredictModelDetailResponseValidationError{
					field:  "MasterSegment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMasterSegment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPredictModelDetailResponseValidationError{
				field:  "MasterSegment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	for idx, item := range m.GetTrainSegments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPredictModelDetailResponseValidationError{
						field:  fmt.Sprintf("TrainSegments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPredictModelDetailResponseValidationError{
						field:  fmt.Sprintf("TrainSegments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPredictModelDetailResponseValidationError{
					field:  fmt.Sprintf("TrainSegments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Status

	if len(errors) > 0 {
		return GetPredictModelDetailResponseMultiError(errors)
	}

	return nil
}

// GetPredictModelDetailResponseMultiError is an error wrapping multiple
// validation errors returned by GetPredictModelDetailResponse.ValidateAll()
// if the designated constraints aren't met.
type GetPredictModelDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPredictModelDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPredictModelDetailResponseMultiError) AllErrors() []error { return m }

// GetPredictModelDetailResponseValidationError is the validation error
// returned by GetPredictModelDetailResponse.Validate if the designated
// constraints aren't met.
type GetPredictModelDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPredictModelDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPredictModelDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPredictModelDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPredictModelDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPredictModelDetailResponseValidationError) ErrorName() string {
	return "GetPredictModelDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPredictModelDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPredictModelDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPredictModelDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPredictModelDetailResponseValidationError{}

// Validate checks the field values on GetMySQLTableSchemaRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMySQLTableSchemaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMySQLTableSchemaRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMySQLTableSchemaRequestMultiError, or nil if none found.
func (m *GetMySQLTableSchemaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMySQLTableSchemaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConnectionId

	// no validation rules for TableName

	if len(errors) > 0 {
		return GetMySQLTableSchemaRequestMultiError(errors)
	}

	return nil
}

// GetMySQLTableSchemaRequestMultiError is an error wrapping multiple
// validation errors returned by GetMySQLTableSchemaRequest.ValidateAll() if
// the designated constraints aren't met.
type GetMySQLTableSchemaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMySQLTableSchemaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMySQLTableSchemaRequestMultiError) AllErrors() []error { return m }

// GetMySQLTableSchemaRequestValidationError is the validation error returned
// by GetMySQLTableSchemaRequest.Validate if the designated constraints aren't met.
type GetMySQLTableSchemaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMySQLTableSchemaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMySQLTableSchemaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMySQLTableSchemaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMySQLTableSchemaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMySQLTableSchemaRequestValidationError) ErrorName() string {
	return "GetMySQLTableSchemaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMySQLTableSchemaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMySQLTableSchemaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMySQLTableSchemaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMySQLTableSchemaRequestValidationError{}

// Validate checks the field values on GetMySQLTableSchemaResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMySQLTableSchemaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMySQLTableSchemaResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMySQLTableSchemaResponseMultiError, or nil if none found.
func (m *GetMySQLTableSchemaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMySQLTableSchemaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetSchema() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMySQLTableSchemaResponseValidationError{
						field:  fmt.Sprintf("Schema[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMySQLTableSchemaResponseValidationError{
						field:  fmt.Sprintf("Schema[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMySQLTableSchemaResponseValidationError{
					field:  fmt.Sprintf("Schema[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetMySQLTableSchemaResponseMultiError(errors)
	}

	return nil
}

// GetMySQLTableSchemaResponseMultiError is an error wrapping multiple
// validation errors returned by GetMySQLTableSchemaResponse.ValidateAll() if
// the designated constraints aren't met.
type GetMySQLTableSchemaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMySQLTableSchemaResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMySQLTableSchemaResponseMultiError) AllErrors() []error { return m }

// GetMySQLTableSchemaResponseValidationError is the validation error returned
// by GetMySQLTableSchemaResponse.Validate if the designated constraints
// aren't met.
type GetMySQLTableSchemaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMySQLTableSchemaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMySQLTableSchemaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMySQLTableSchemaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMySQLTableSchemaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMySQLTableSchemaResponseValidationError) ErrorName() string {
	return "GetMySQLTableSchemaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMySQLTableSchemaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMySQLTableSchemaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMySQLTableSchemaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMySQLTableSchemaResponseValidationError{}

// Validate checks the field values on GetListMasterSegmentProfilesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetListMasterSegmentProfilesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListMasterSegmentProfilesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetListMasterSegmentProfilesRequestMultiError, or nil if none found.
func (m *GetListMasterSegmentProfilesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListMasterSegmentProfilesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetListMasterSegmentProfilesRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for SearchField

	// no validation rules for SearchValue

	if len(errors) > 0 {
		return GetListMasterSegmentProfilesRequestMultiError(errors)
	}

	return nil
}

// GetListMasterSegmentProfilesRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetListMasterSegmentProfilesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetListMasterSegmentProfilesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListMasterSegmentProfilesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListMasterSegmentProfilesRequestMultiError) AllErrors() []error { return m }

// GetListMasterSegmentProfilesRequestValidationError is the validation error
// returned by GetListMasterSegmentProfilesRequest.Validate if the designated
// constraints aren't met.
type GetListMasterSegmentProfilesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListMasterSegmentProfilesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListMasterSegmentProfilesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListMasterSegmentProfilesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListMasterSegmentProfilesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListMasterSegmentProfilesRequestValidationError) ErrorName() string {
	return "GetListMasterSegmentProfilesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetListMasterSegmentProfilesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListMasterSegmentProfilesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListMasterSegmentProfilesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListMasterSegmentProfilesRequestValidationError{}

// Validate checks the field values on GetListMasterSegmentProfilesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetListMasterSegmentProfilesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListMasterSegmentProfilesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetListMasterSegmentProfilesResponseMultiError, or nil if none found.
func (m *GetListMasterSegmentProfilesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListMasterSegmentProfilesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Count

	if len(errors) > 0 {
		return GetListMasterSegmentProfilesResponseMultiError(errors)
	}

	return nil
}

// GetListMasterSegmentProfilesResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetListMasterSegmentProfilesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetListMasterSegmentProfilesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListMasterSegmentProfilesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListMasterSegmentProfilesResponseMultiError) AllErrors() []error { return m }

// GetListMasterSegmentProfilesResponseValidationError is the validation error
// returned by GetListMasterSegmentProfilesResponse.Validate if the designated
// constraints aren't met.
type GetListMasterSegmentProfilesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListMasterSegmentProfilesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListMasterSegmentProfilesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListMasterSegmentProfilesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListMasterSegmentProfilesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListMasterSegmentProfilesResponseValidationError) ErrorName() string {
	return "GetListMasterSegmentProfilesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetListMasterSegmentProfilesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListMasterSegmentProfilesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListMasterSegmentProfilesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListMasterSegmentProfilesResponseValidationError{}

// Validate checks the field values on ApplyPredictModelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplyPredictModelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplyPredictModelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplyPredictModelRequestMultiError, or nil if none found.
func (m *ApplyPredictModelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplyPredictModelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PredictModelId

	// no validation rules for SegmentId

	if len(errors) > 0 {
		return ApplyPredictModelRequestMultiError(errors)
	}

	return nil
}

// ApplyPredictModelRequestMultiError is an error wrapping multiple validation
// errors returned by ApplyPredictModelRequest.ValidateAll() if the designated
// constraints aren't met.
type ApplyPredictModelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplyPredictModelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplyPredictModelRequestMultiError) AllErrors() []error { return m }

// ApplyPredictModelRequestValidationError is the validation error returned by
// ApplyPredictModelRequest.Validate if the designated constraints aren't met.
type ApplyPredictModelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplyPredictModelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplyPredictModelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplyPredictModelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplyPredictModelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplyPredictModelRequestValidationError) ErrorName() string {
	return "ApplyPredictModelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApplyPredictModelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplyPredictModelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplyPredictModelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplyPredictModelRequestValidationError{}

// Validate checks the field values on ApplyPredictModelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplyPredictModelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplyPredictModelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplyPredictModelResponseMultiError, or nil if none found.
func (m *ApplyPredictModelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplyPredictModelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return ApplyPredictModelResponseMultiError(errors)
	}

	return nil
}

// ApplyPredictModelResponseMultiError is an error wrapping multiple validation
// errors returned by ApplyPredictModelResponse.ValidateAll() if the
// designated constraints aren't met.
type ApplyPredictModelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplyPredictModelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplyPredictModelResponseMultiError) AllErrors() []error { return m }

// ApplyPredictModelResponseValidationError is the validation error returned by
// ApplyPredictModelResponse.Validate if the designated constraints aren't met.
type ApplyPredictModelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplyPredictModelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplyPredictModelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplyPredictModelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplyPredictModelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplyPredictModelResponseValidationError) ErrorName() string {
	return "ApplyPredictModelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ApplyPredictModelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplyPredictModelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplyPredictModelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplyPredictModelResponseValidationError{}

// Validate checks the field values on GetListPredictionActionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetListPredictionActionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListPredictionActionsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetListPredictionActionsRequestMultiError, or nil if none found.
func (m *GetListPredictionActionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListPredictionActionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetListPredictionActionsRequestMultiError(errors)
	}

	return nil
}

// GetListPredictionActionsRequestMultiError is an error wrapping multiple
// validation errors returned by GetListPredictionActionsRequest.ValidateAll()
// if the designated constraints aren't met.
type GetListPredictionActionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListPredictionActionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListPredictionActionsRequestMultiError) AllErrors() []error { return m }

// GetListPredictionActionsRequestValidationError is the validation error
// returned by GetListPredictionActionsRequest.Validate if the designated
// constraints aren't met.
type GetListPredictionActionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListPredictionActionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListPredictionActionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListPredictionActionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListPredictionActionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListPredictionActionsRequestValidationError) ErrorName() string {
	return "GetListPredictionActionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetListPredictionActionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListPredictionActionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListPredictionActionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListPredictionActionsRequestValidationError{}

// Validate checks the field values on GetListPredictionActionsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetListPredictionActionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListPredictionActionsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetListPredictionActionsResponseMultiError, or nil if none found.
func (m *GetListPredictionActionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListPredictionActionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Count

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetListPredictionActionsResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetListPredictionActionsResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetListPredictionActionsResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetListPredictionActionsResponseMultiError(errors)
	}

	return nil
}

// GetListPredictionActionsResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetListPredictionActionsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetListPredictionActionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListPredictionActionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListPredictionActionsResponseMultiError) AllErrors() []error { return m }

// GetListPredictionActionsResponseValidationError is the validation error
// returned by GetListPredictionActionsResponse.Validate if the designated
// constraints aren't met.
type GetListPredictionActionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListPredictionActionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListPredictionActionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListPredictionActionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListPredictionActionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListPredictionActionsResponseValidationError) ErrorName() string {
	return "GetListPredictionActionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetListPredictionActionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListPredictionActionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListPredictionActionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListPredictionActionsResponseValidationError{}

// Validate checks the field values on TriggerDataActionRunRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerDataActionRunRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerDataActionRunRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TriggerDataActionRunRequestMultiError, or nil if none found.
func (m *TriggerDataActionRunRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerDataActionRunRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := TriggerDataActionRunRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TriggerDataActionRunRequestMultiError(errors)
	}

	return nil
}

// TriggerDataActionRunRequestMultiError is an error wrapping multiple
// validation errors returned by TriggerDataActionRunRequest.ValidateAll() if
// the designated constraints aren't met.
type TriggerDataActionRunRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerDataActionRunRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerDataActionRunRequestMultiError) AllErrors() []error { return m }

// TriggerDataActionRunRequestValidationError is the validation error returned
// by TriggerDataActionRunRequest.Validate if the designated constraints
// aren't met.
type TriggerDataActionRunRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerDataActionRunRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerDataActionRunRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerDataActionRunRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerDataActionRunRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerDataActionRunRequestValidationError) ErrorName() string {
	return "TriggerDataActionRunRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerDataActionRunRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerDataActionRunRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerDataActionRunRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerDataActionRunRequestValidationError{}

// Validate checks the field values on TriggerDataActionRunResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerDataActionRunResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerDataActionRunResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TriggerDataActionRunResponseMultiError, or nil if none found.
func (m *TriggerDataActionRunResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerDataActionRunResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return TriggerDataActionRunResponseMultiError(errors)
	}

	return nil
}

// TriggerDataActionRunResponseMultiError is an error wrapping multiple
// validation errors returned by TriggerDataActionRunResponse.ValidateAll() if
// the designated constraints aren't met.
type TriggerDataActionRunResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerDataActionRunResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerDataActionRunResponseMultiError) AllErrors() []error { return m }

// TriggerDataActionRunResponseValidationError is the validation error returned
// by TriggerDataActionRunResponse.Validate if the designated constraints
// aren't met.
type TriggerDataActionRunResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerDataActionRunResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerDataActionRunResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerDataActionRunResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerDataActionRunResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerDataActionRunResponseValidationError) ErrorName() string {
	return "TriggerDataActionRunResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerDataActionRunResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerDataActionRunResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerDataActionRunResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerDataActionRunResponseValidationError{}

// Validate checks the field values on GetMasterSegmentProfileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMasterSegmentProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMasterSegmentProfileRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetMasterSegmentProfileRequestMultiError, or nil if none found.
func (m *GetMasterSegmentProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMasterSegmentProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CdpSystemUuid

	if len(errors) > 0 {
		return GetMasterSegmentProfileRequestMultiError(errors)
	}

	return nil
}

// GetMasterSegmentProfileRequestMultiError is an error wrapping multiple
// validation errors returned by GetMasterSegmentProfileRequest.ValidateAll()
// if the designated constraints aren't met.
type GetMasterSegmentProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMasterSegmentProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMasterSegmentProfileRequestMultiError) AllErrors() []error { return m }

// GetMasterSegmentProfileRequestValidationError is the validation error
// returned by GetMasterSegmentProfileRequest.Validate if the designated
// constraints aren't met.
type GetMasterSegmentProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMasterSegmentProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMasterSegmentProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMasterSegmentProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMasterSegmentProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMasterSegmentProfileRequestValidationError) ErrorName() string {
	return "GetMasterSegmentProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMasterSegmentProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMasterSegmentProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMasterSegmentProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMasterSegmentProfileRequestValidationError{}

// Validate checks the field values on GetMasterSegmentProfileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMasterSegmentProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMasterSegmentProfileResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetMasterSegmentProfileResponseMultiError, or nil if none found.
func (m *GetMasterSegmentProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMasterSegmentProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Profile

	if len(errors) > 0 {
		return GetMasterSegmentProfileResponseMultiError(errors)
	}

	return nil
}

// GetMasterSegmentProfileResponseMultiError is an error wrapping multiple
// validation errors returned by GetMasterSegmentProfileResponse.ValidateAll()
// if the designated constraints aren't met.
type GetMasterSegmentProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMasterSegmentProfileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMasterSegmentProfileResponseMultiError) AllErrors() []error { return m }

// GetMasterSegmentProfileResponseValidationError is the validation error
// returned by GetMasterSegmentProfileResponse.Validate if the designated
// constraints aren't met.
type GetMasterSegmentProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMasterSegmentProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMasterSegmentProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMasterSegmentProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMasterSegmentProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMasterSegmentProfileResponseValidationError) ErrorName() string {
	return "GetMasterSegmentProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMasterSegmentProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMasterSegmentProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMasterSegmentProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMasterSegmentProfileResponseValidationError{}

// Validate checks the field values on GetResultPredictionActionsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetResultPredictionActionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResultPredictionActionsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetResultPredictionActionsRequestMultiError, or nil if none found.
func (m *GetResultPredictionActionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResultPredictionActionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetActionId() <= 0 {
		err := GetResultPredictionActionsRequestValidationError{
			field:  "ActionId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetResultPredictionActionsRequestMultiError(errors)
	}

	return nil
}

// GetResultPredictionActionsRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetResultPredictionActionsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetResultPredictionActionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResultPredictionActionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResultPredictionActionsRequestMultiError) AllErrors() []error { return m }

// GetResultPredictionActionsRequestValidationError is the validation error
// returned by GetResultPredictionActionsRequest.Validate if the designated
// constraints aren't met.
type GetResultPredictionActionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResultPredictionActionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResultPredictionActionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResultPredictionActionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResultPredictionActionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResultPredictionActionsRequestValidationError) ErrorName() string {
	return "GetResultPredictionActionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetResultPredictionActionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResultPredictionActionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResultPredictionActionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResultPredictionActionsRequestValidationError{}

// Validate checks the field values on GetResultPredictionActionsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetResultPredictionActionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResultPredictionActionsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetResultPredictionActionsResponseMultiError, or nil if none found.
func (m *GetResultPredictionActionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResultPredictionActionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Count

	// no validation rules for SegmentName

	// no validation rules for ModelName

	// no validation rules for Label_1

	// no validation rules for Label_2

	if len(errors) > 0 {
		return GetResultPredictionActionsResponseMultiError(errors)
	}

	return nil
}

// GetResultPredictionActionsResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetResultPredictionActionsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetResultPredictionActionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResultPredictionActionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResultPredictionActionsResponseMultiError) AllErrors() []error { return m }

// GetResultPredictionActionsResponseValidationError is the validation error
// returned by GetResultPredictionActionsResponse.Validate if the designated
// constraints aren't met.
type GetResultPredictionActionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResultPredictionActionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResultPredictionActionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResultPredictionActionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResultPredictionActionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResultPredictionActionsResponseValidationError) ErrorName() string {
	return "GetResultPredictionActionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetResultPredictionActionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResultPredictionActionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResultPredictionActionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResultPredictionActionsResponseValidationError{}

// Validate checks the field values on GetDataActionRunsPerDayRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDataActionRunsPerDayRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDataActionRunsPerDayRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetDataActionRunsPerDayRequestMultiError, or nil if none found.
func (m *GetDataActionRunsPerDayRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDataActionRunsPerDayRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetDataActionRunsPerDayRequestMultiError(errors)
	}

	return nil
}

// GetDataActionRunsPerDayRequestMultiError is an error wrapping multiple
// validation errors returned by GetDataActionRunsPerDayRequest.ValidateAll()
// if the designated constraints aren't met.
type GetDataActionRunsPerDayRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDataActionRunsPerDayRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDataActionRunsPerDayRequestMultiError) AllErrors() []error { return m }

// GetDataActionRunsPerDayRequestValidationError is the validation error
// returned by GetDataActionRunsPerDayRequest.Validate if the designated
// constraints aren't met.
type GetDataActionRunsPerDayRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDataActionRunsPerDayRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDataActionRunsPerDayRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDataActionRunsPerDayRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDataActionRunsPerDayRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDataActionRunsPerDayRequestValidationError) ErrorName() string {
	return "GetDataActionRunsPerDayRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDataActionRunsPerDayRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDataActionRunsPerDayRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDataActionRunsPerDayRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDataActionRunsPerDayRequestValidationError{}

// Validate checks the field values on GetDataActionRunsPerDayResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDataActionRunsPerDayResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDataActionRunsPerDayResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetDataActionRunsPerDayResponseMultiError, or nil if none found.
func (m *GetDataActionRunsPerDayResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDataActionRunsPerDayResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDataActionRunsPerDayResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDataActionRunsPerDayResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDataActionRunsPerDayResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetDataActionRunsPerDayResponseMultiError(errors)
	}

	return nil
}

// GetDataActionRunsPerDayResponseMultiError is an error wrapping multiple
// validation errors returned by GetDataActionRunsPerDayResponse.ValidateAll()
// if the designated constraints aren't met.
type GetDataActionRunsPerDayResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDataActionRunsPerDayResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDataActionRunsPerDayResponseMultiError) AllErrors() []error { return m }

// GetDataActionRunsPerDayResponseValidationError is the validation error
// returned by GetDataActionRunsPerDayResponse.Validate if the designated
// constraints aren't met.
type GetDataActionRunsPerDayResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDataActionRunsPerDayResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDataActionRunsPerDayResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDataActionRunsPerDayResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDataActionRunsPerDayResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDataActionRunsPerDayResponseValidationError) ErrorName() string {
	return "GetDataActionRunsPerDayResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDataActionRunsPerDayResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDataActionRunsPerDayResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDataActionRunsPerDayResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDataActionRunsPerDayResponseValidationError{}

// Validate checks the field values on GetDataRunsProportionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDataRunsProportionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDataRunsProportionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDataRunsProportionRequestMultiError, or nil if none found.
func (m *GetDataRunsProportionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDataRunsProportionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetDataRunsProportionRequestMultiError(errors)
	}

	return nil
}

// GetDataRunsProportionRequestMultiError is an error wrapping multiple
// validation errors returned by GetDataRunsProportionRequest.ValidateAll() if
// the designated constraints aren't met.
type GetDataRunsProportionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDataRunsProportionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDataRunsProportionRequestMultiError) AllErrors() []error { return m }

// GetDataRunsProportionRequestValidationError is the validation error returned
// by GetDataRunsProportionRequest.Validate if the designated constraints
// aren't met.
type GetDataRunsProportionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDataRunsProportionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDataRunsProportionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDataRunsProportionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDataRunsProportionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDataRunsProportionRequestValidationError) ErrorName() string {
	return "GetDataRunsProportionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDataRunsProportionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDataRunsProportionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDataRunsProportionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDataRunsProportionRequestValidationError{}

// Validate checks the field values on GetDataRunsProportionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDataRunsProportionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDataRunsProportionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetDataRunsProportionResponseMultiError, or nil if none found.
func (m *GetDataRunsProportionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDataRunsProportionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDataRunsProportionResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDataRunsProportionResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDataRunsProportionResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetDataRunsProportionResponseMultiError(errors)
	}

	return nil
}

// GetDataRunsProportionResponseMultiError is an error wrapping multiple
// validation errors returned by GetDataRunsProportionResponse.ValidateAll()
// if the designated constraints aren't met.
type GetDataRunsProportionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDataRunsProportionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDataRunsProportionResponseMultiError) AllErrors() []error { return m }

// GetDataRunsProportionResponseValidationError is the validation error
// returned by GetDataRunsProportionResponse.Validate if the designated
// constraints aren't met.
type GetDataRunsProportionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDataRunsProportionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDataRunsProportionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDataRunsProportionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDataRunsProportionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDataRunsProportionResponseValidationError) ErrorName() string {
	return "GetDataRunsProportionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDataRunsProportionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDataRunsProportionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDataRunsProportionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDataRunsProportionResponseValidationError{}

// Validate checks the field values on GetBehaviorProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBehaviorProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBehaviorProfileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBehaviorProfileRequestMultiError, or nil if none found.
func (m *GetBehaviorProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBehaviorProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ForeignKeyValue

	if len(errors) > 0 {
		return GetBehaviorProfileRequestMultiError(errors)
	}

	return nil
}

// GetBehaviorProfileRequestMultiError is an error wrapping multiple validation
// errors returned by GetBehaviorProfileRequest.ValidateAll() if the
// designated constraints aren't met.
type GetBehaviorProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBehaviorProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBehaviorProfileRequestMultiError) AllErrors() []error { return m }

// GetBehaviorProfileRequestValidationError is the validation error returned by
// GetBehaviorProfileRequest.Validate if the designated constraints aren't met.
type GetBehaviorProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBehaviorProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBehaviorProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBehaviorProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBehaviorProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBehaviorProfileRequestValidationError) ErrorName() string {
	return "GetBehaviorProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBehaviorProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBehaviorProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBehaviorProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBehaviorProfileRequestValidationError{}

// Validate checks the field values on GetBehaviorProfileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBehaviorProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBehaviorProfileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBehaviorProfileResponseMultiError, or nil if none found.
func (m *GetBehaviorProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBehaviorProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Count

	if len(errors) > 0 {
		return GetBehaviorProfileResponseMultiError(errors)
	}

	return nil
}

// GetBehaviorProfileResponseMultiError is an error wrapping multiple
// validation errors returned by GetBehaviorProfileResponse.ValidateAll() if
// the designated constraints aren't met.
type GetBehaviorProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBehaviorProfileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBehaviorProfileResponseMultiError) AllErrors() []error { return m }

// GetBehaviorProfileResponseValidationError is the validation error returned
// by GetBehaviorProfileResponse.Validate if the designated constraints aren't met.
type GetBehaviorProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBehaviorProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBehaviorProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBehaviorProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBehaviorProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBehaviorProfileResponseValidationError) ErrorName() string {
	return "GetBehaviorProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBehaviorProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBehaviorProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBehaviorProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBehaviorProfileResponseValidationError{}

// Validate checks the field values on GetListDestinationMapRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetListDestinationMapRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListDestinationMapRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetListDestinationMapRequestMultiError, or nil if none found.
func (m *GetListDestinationMapRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListDestinationMapRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDestinationId() <= 0 {
		err := GetListDestinationMapRequestValidationError{
			field:  "DestinationId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetListDestinationMapRequestMultiError(errors)
	}

	return nil
}

// GetListDestinationMapRequestMultiError is an error wrapping multiple
// validation errors returned by GetListDestinationMapRequest.ValidateAll() if
// the designated constraints aren't met.
type GetListDestinationMapRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListDestinationMapRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListDestinationMapRequestMultiError) AllErrors() []error { return m }

// GetListDestinationMapRequestValidationError is the validation error returned
// by GetListDestinationMapRequest.Validate if the designated constraints
// aren't met.
type GetListDestinationMapRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListDestinationMapRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListDestinationMapRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListDestinationMapRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListDestinationMapRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListDestinationMapRequestValidationError) ErrorName() string {
	return "GetListDestinationMapRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetListDestinationMapRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListDestinationMapRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListDestinationMapRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListDestinationMapRequestValidationError{}

// Validate checks the field values on GetListDestinationMapResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetListDestinationMapResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListDestinationMapResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetListDestinationMapResponseMultiError, or nil if none found.
func (m *GetListDestinationMapResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListDestinationMapResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Count

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetListDestinationMapResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetListDestinationMapResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetListDestinationMapResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetListDestinationMapResponseMultiError(errors)
	}

	return nil
}

// GetListDestinationMapResponseMultiError is an error wrapping multiple
// validation errors returned by GetListDestinationMapResponse.ValidateAll()
// if the designated constraints aren't met.
type GetListDestinationMapResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListDestinationMapResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListDestinationMapResponseMultiError) AllErrors() []error { return m }

// GetListDestinationMapResponseValidationError is the validation error
// returned by GetListDestinationMapResponse.Validate if the designated
// constraints aren't met.
type GetListDestinationMapResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListDestinationMapResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListDestinationMapResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListDestinationMapResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListDestinationMapResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListDestinationMapResponseValidationError) ErrorName() string {
	return "GetListDestinationMapResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetListDestinationMapResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListDestinationMapResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListDestinationMapResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListDestinationMapResponseValidationError{}

// Validate checks the field values on TotalProfilesMasterSegmentRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TotalProfilesMasterSegmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TotalProfilesMasterSegmentRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TotalProfilesMasterSegmentRequestMultiError, or nil if none found.
func (m *TotalProfilesMasterSegmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TotalProfilesMasterSegmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := TotalProfilesMasterSegmentRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TotalProfilesMasterSegmentRequestMultiError(errors)
	}

	return nil
}

// TotalProfilesMasterSegmentRequestMultiError is an error wrapping multiple
// validation errors returned by
// TotalProfilesMasterSegmentRequest.ValidateAll() if the designated
// constraints aren't met.
type TotalProfilesMasterSegmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TotalProfilesMasterSegmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TotalProfilesMasterSegmentRequestMultiError) AllErrors() []error { return m }

// TotalProfilesMasterSegmentRequestValidationError is the validation error
// returned by TotalProfilesMasterSegmentRequest.Validate if the designated
// constraints aren't met.
type TotalProfilesMasterSegmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TotalProfilesMasterSegmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TotalProfilesMasterSegmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TotalProfilesMasterSegmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TotalProfilesMasterSegmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TotalProfilesMasterSegmentRequestValidationError) ErrorName() string {
	return "TotalProfilesMasterSegmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TotalProfilesMasterSegmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTotalProfilesMasterSegmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TotalProfilesMasterSegmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TotalProfilesMasterSegmentRequestValidationError{}

// Validate checks the field values on TotalProfilesMasterSegmentResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TotalProfilesMasterSegmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TotalProfilesMasterSegmentResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TotalProfilesMasterSegmentResponseMultiError, or nil if none found.
func (m *TotalProfilesMasterSegmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TotalProfilesMasterSegmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Count

	if len(errors) > 0 {
		return TotalProfilesMasterSegmentResponseMultiError(errors)
	}

	return nil
}

// TotalProfilesMasterSegmentResponseMultiError is an error wrapping multiple
// validation errors returned by
// TotalProfilesMasterSegmentResponse.ValidateAll() if the designated
// constraints aren't met.
type TotalProfilesMasterSegmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TotalProfilesMasterSegmentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TotalProfilesMasterSegmentResponseMultiError) AllErrors() []error { return m }

// TotalProfilesMasterSegmentResponseValidationError is the validation error
// returned by TotalProfilesMasterSegmentResponse.Validate if the designated
// constraints aren't met.
type TotalProfilesMasterSegmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TotalProfilesMasterSegmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TotalProfilesMasterSegmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TotalProfilesMasterSegmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TotalProfilesMasterSegmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TotalProfilesMasterSegmentResponseValidationError) ErrorName() string {
	return "TotalProfilesMasterSegmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TotalProfilesMasterSegmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTotalProfilesMasterSegmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TotalProfilesMasterSegmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TotalProfilesMasterSegmentResponseValidationError{}

// Validate checks the field values on GetListDataSourcesResponse_DataSource
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetListDataSourcesResponse_DataSource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListDataSourcesResponse_DataSource
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetListDataSourcesResponse_DataSourceMultiError, or nil if none found.
func (m *GetListDataSourcesResponse_DataSource) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListDataSourcesResponse_DataSource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return GetListDataSourcesResponse_DataSourceMultiError(errors)
	}

	return nil
}

// GetListDataSourcesResponse_DataSourceMultiError is an error wrapping
// multiple validation errors returned by
// GetListDataSourcesResponse_DataSource.ValidateAll() if the designated
// constraints aren't met.
type GetListDataSourcesResponse_DataSourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListDataSourcesResponse_DataSourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListDataSourcesResponse_DataSourceMultiError) AllErrors() []error { return m }

// GetListDataSourcesResponse_DataSourceValidationError is the validation error
// returned by GetListDataSourcesResponse_DataSource.Validate if the
// designated constraints aren't met.
type GetListDataSourcesResponse_DataSourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListDataSourcesResponse_DataSourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListDataSourcesResponse_DataSourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListDataSourcesResponse_DataSourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListDataSourcesResponse_DataSourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListDataSourcesResponse_DataSourceValidationError) ErrorName() string {
	return "GetListDataSourcesResponse_DataSourceValidationError"
}

// Error satisfies the builtin error interface
func (e GetListDataSourcesResponse_DataSourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListDataSourcesResponse_DataSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListDataSourcesResponse_DataSourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListDataSourcesResponse_DataSourceValidationError{}

// Validate checks the field values on GetListDataTablesResponse_DataTable with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetListDataTablesResponse_DataTable) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListDataTablesResponse_DataTable
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetListDataTablesResponse_DataTableMultiError, or nil if none found.
func (m *GetListDataTablesResponse_DataTable) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListDataTablesResponse_DataTable) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	for idx, item := range m.GetDataSources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetListDataTablesResponse_DataTableValidationError{
						field:  fmt.Sprintf("DataSources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetListDataTablesResponse_DataTableValidationError{
						field:  fmt.Sprintf("DataSources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetListDataTablesResponse_DataTableValidationError{
					field:  fmt.Sprintf("DataSources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDataDestinations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetListDataTablesResponse_DataTableValidationError{
						field:  fmt.Sprintf("DataDestinations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetListDataTablesResponse_DataTableValidationError{
						field:  fmt.Sprintf("DataDestinations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetListDataTablesResponse_DataTableValidationError{
					field:  fmt.Sprintf("DataDestinations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetListDataTablesResponse_DataTableMultiError(errors)
	}

	return nil
}

// GetListDataTablesResponse_DataTableMultiError is an error wrapping multiple
// validation errors returned by
// GetListDataTablesResponse_DataTable.ValidateAll() if the designated
// constraints aren't met.
type GetListDataTablesResponse_DataTableMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListDataTablesResponse_DataTableMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListDataTablesResponse_DataTableMultiError) AllErrors() []error { return m }

// GetListDataTablesResponse_DataTableValidationError is the validation error
// returned by GetListDataTablesResponse_DataTable.Validate if the designated
// constraints aren't met.
type GetListDataTablesResponse_DataTableValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListDataTablesResponse_DataTableValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListDataTablesResponse_DataTableValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListDataTablesResponse_DataTableValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListDataTablesResponse_DataTableValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListDataTablesResponse_DataTableValidationError) ErrorName() string {
	return "GetListDataTablesResponse_DataTableValidationError"
}

// Error satisfies the builtin error interface
func (e GetListDataTablesResponse_DataTableValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListDataTablesResponse_DataTable.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListDataTablesResponse_DataTableValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListDataTablesResponse_DataTableValidationError{}

// Validate checks the field values on GetListConnectionsResponse_Connection
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetListConnectionsResponse_Connection) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListConnectionsResponse_Connection
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetListConnectionsResponse_ConnectionMultiError, or nil if none found.
func (m *GetListConnectionsResponse_Connection) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListConnectionsResponse_Connection) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for UpdatedAt

	for idx, item := range m.GetDataSources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetListConnectionsResponse_ConnectionValidationError{
						field:  fmt.Sprintf("DataSources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetListConnectionsResponse_ConnectionValidationError{
						field:  fmt.Sprintf("DataSources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetListConnectionsResponse_ConnectionValidationError{
					field:  fmt.Sprintf("DataSources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDataDestinations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetListConnectionsResponse_ConnectionValidationError{
						field:  fmt.Sprintf("DataDestinations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetListConnectionsResponse_ConnectionValidationError{
						field:  fmt.Sprintf("DataDestinations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetListConnectionsResponse_ConnectionValidationError{
					field:  fmt.Sprintf("DataDestinations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetListConnectionsResponse_ConnectionMultiError(errors)
	}

	return nil
}

// GetListConnectionsResponse_ConnectionMultiError is an error wrapping
// multiple validation errors returned by
// GetListConnectionsResponse_Connection.ValidateAll() if the designated
// constraints aren't met.
type GetListConnectionsResponse_ConnectionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListConnectionsResponse_ConnectionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListConnectionsResponse_ConnectionMultiError) AllErrors() []error { return m }

// GetListConnectionsResponse_ConnectionValidationError is the validation error
// returned by GetListConnectionsResponse_Connection.Validate if the
// designated constraints aren't met.
type GetListConnectionsResponse_ConnectionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListConnectionsResponse_ConnectionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListConnectionsResponse_ConnectionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListConnectionsResponse_ConnectionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListConnectionsResponse_ConnectionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListConnectionsResponse_ConnectionValidationError) ErrorName() string {
	return "GetListConnectionsResponse_ConnectionValidationError"
}

// Error satisfies the builtin error interface
func (e GetListConnectionsResponse_ConnectionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListConnectionsResponse_Connection.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListConnectionsResponse_ConnectionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListConnectionsResponse_ConnectionValidationError{}

// Validate checks the field values on
// GetListFileExportRecordsResponse_FileExportRecord with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetListFileExportRecordsResponse_FileExportRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetListFileExportRecordsResponse_FileExportRecord with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// GetListFileExportRecordsResponse_FileExportRecordMultiError, or nil if none found.
func (m *GetListFileExportRecordsResponse_FileExportRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListFileExportRecordsResponse_FileExportRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DataTableId

	// no validation rules for Format

	// no validation rules for Status

	// no validation rules for DownloadUrl

	// no validation rules for ExpirationTime

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return GetListFileExportRecordsResponse_FileExportRecordMultiError(errors)
	}

	return nil
}

// GetListFileExportRecordsResponse_FileExportRecordMultiError is an error
// wrapping multiple validation errors returned by
// GetListFileExportRecordsResponse_FileExportRecord.ValidateAll() if the
// designated constraints aren't met.
type GetListFileExportRecordsResponse_FileExportRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListFileExportRecordsResponse_FileExportRecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListFileExportRecordsResponse_FileExportRecordMultiError) AllErrors() []error { return m }

// GetListFileExportRecordsResponse_FileExportRecordValidationError is the
// validation error returned by
// GetListFileExportRecordsResponse_FileExportRecord.Validate if the
// designated constraints aren't met.
type GetListFileExportRecordsResponse_FileExportRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListFileExportRecordsResponse_FileExportRecordValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetListFileExportRecordsResponse_FileExportRecordValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetListFileExportRecordsResponse_FileExportRecordValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetListFileExportRecordsResponse_FileExportRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListFileExportRecordsResponse_FileExportRecordValidationError) ErrorName() string {
	return "GetListFileExportRecordsResponse_FileExportRecordValidationError"
}

// Error satisfies the builtin error interface
func (e GetListFileExportRecordsResponse_FileExportRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListFileExportRecordsResponse_FileExportRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListFileExportRecordsResponse_FileExportRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListFileExportRecordsResponse_FileExportRecordValidationError{}

// Validate checks the field values on
// CreateMasterSegmentRequest_AttributeTable with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateMasterSegmentRequest_AttributeTable) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateMasterSegmentRequest_AttributeTable with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateMasterSegmentRequest_AttributeTableMultiError, or nil if none found.
func (m *CreateMasterSegmentRequest_AttributeTable) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMasterSegmentRequest_AttributeTable) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTableId() <= 0 {
		err := CreateMasterSegmentRequest_AttributeTableValidationError{
			field:  "TableId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetForeignKey()) < 1 {
		err := CreateMasterSegmentRequest_AttributeTableValidationError{
			field:  "ForeignKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetJoinKey()) < 1 {
		err := CreateMasterSegmentRequest_AttributeTableValidationError{
			field:  "JoinKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetSelectedColumns()) < 1 {
		err := CreateMasterSegmentRequest_AttributeTableValidationError{
			field:  "SelectedColumns",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetSelectedColumns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateMasterSegmentRequest_AttributeTableValidationError{
						field:  fmt.Sprintf("SelectedColumns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateMasterSegmentRequest_AttributeTableValidationError{
						field:  fmt.Sprintf("SelectedColumns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateMasterSegmentRequest_AttributeTableValidationError{
					field:  fmt.Sprintf("SelectedColumns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateMasterSegmentRequest_AttributeTableMultiError(errors)
	}

	return nil
}

// CreateMasterSegmentRequest_AttributeTableMultiError is an error wrapping
// multiple validation errors returned by
// CreateMasterSegmentRequest_AttributeTable.ValidateAll() if the designated
// constraints aren't met.
type CreateMasterSegmentRequest_AttributeTableMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMasterSegmentRequest_AttributeTableMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMasterSegmentRequest_AttributeTableMultiError) AllErrors() []error { return m }

// CreateMasterSegmentRequest_AttributeTableValidationError is the validation
// error returned by CreateMasterSegmentRequest_AttributeTable.Validate if the
// designated constraints aren't met.
type CreateMasterSegmentRequest_AttributeTableValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMasterSegmentRequest_AttributeTableValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMasterSegmentRequest_AttributeTableValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMasterSegmentRequest_AttributeTableValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMasterSegmentRequest_AttributeTableValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMasterSegmentRequest_AttributeTableValidationError) ErrorName() string {
	return "CreateMasterSegmentRequest_AttributeTableValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMasterSegmentRequest_AttributeTableValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMasterSegmentRequest_AttributeTable.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMasterSegmentRequest_AttributeTableValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMasterSegmentRequest_AttributeTableValidationError{}

// Validate checks the field values on CreateMasterSegmentRequest_BehaviorTable
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateMasterSegmentRequest_BehaviorTable) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateMasterSegmentRequest_BehaviorTable with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateMasterSegmentRequest_BehaviorTableMultiError, or nil if none found.
func (m *CreateMasterSegmentRequest_BehaviorTable) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMasterSegmentRequest_BehaviorTable) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateMasterSegmentRequest_BehaviorTableValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTableId() <= 0 {
		err := CreateMasterSegmentRequest_BehaviorTableValidationError{
			field:  "TableId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetForeignKey()) < 1 {
		err := CreateMasterSegmentRequest_BehaviorTableValidationError{
			field:  "ForeignKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetJoinKey()) < 1 {
		err := CreateMasterSegmentRequest_BehaviorTableValidationError{
			field:  "JoinKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetSelectedColumns()) < 1 {
		err := CreateMasterSegmentRequest_BehaviorTableValidationError{
			field:  "SelectedColumns",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetSelectedColumns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateMasterSegmentRequest_BehaviorTableValidationError{
						field:  fmt.Sprintf("SelectedColumns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateMasterSegmentRequest_BehaviorTableValidationError{
						field:  fmt.Sprintf("SelectedColumns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateMasterSegmentRequest_BehaviorTableValidationError{
					field:  fmt.Sprintf("SelectedColumns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateMasterSegmentRequest_BehaviorTableMultiError(errors)
	}

	return nil
}

// CreateMasterSegmentRequest_BehaviorTableMultiError is an error wrapping
// multiple validation errors returned by
// CreateMasterSegmentRequest_BehaviorTable.ValidateAll() if the designated
// constraints aren't met.
type CreateMasterSegmentRequest_BehaviorTableMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMasterSegmentRequest_BehaviorTableMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMasterSegmentRequest_BehaviorTableMultiError) AllErrors() []error { return m }

// CreateMasterSegmentRequest_BehaviorTableValidationError is the validation
// error returned by CreateMasterSegmentRequest_BehaviorTable.Validate if the
// designated constraints aren't met.
type CreateMasterSegmentRequest_BehaviorTableValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMasterSegmentRequest_BehaviorTableValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMasterSegmentRequest_BehaviorTableValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMasterSegmentRequest_BehaviorTableValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMasterSegmentRequest_BehaviorTableValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMasterSegmentRequest_BehaviorTableValidationError) ErrorName() string {
	return "CreateMasterSegmentRequest_BehaviorTableValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMasterSegmentRequest_BehaviorTableValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMasterSegmentRequest_BehaviorTable.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMasterSegmentRequest_BehaviorTableValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMasterSegmentRequest_BehaviorTableValidationError{}

// Validate checks the field values on
// GetMasterSegmentDetailResponse_AttributeTable with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetMasterSegmentDetailResponse_AttributeTable) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetMasterSegmentDetailResponse_AttributeTable with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetMasterSegmentDetailResponse_AttributeTableMultiError, or nil if none found.
func (m *GetMasterSegmentDetailResponse_AttributeTable) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMasterSegmentDetailResponse_AttributeTable) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RawTableId

	// no validation rules for RawTableName

	// no validation rules for ForeignKey

	// no validation rules for JoinKey

	for idx, item := range m.GetSelectedColumns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMasterSegmentDetailResponse_AttributeTableValidationError{
						field:  fmt.Sprintf("SelectedColumns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMasterSegmentDetailResponse_AttributeTableValidationError{
						field:  fmt.Sprintf("SelectedColumns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMasterSegmentDetailResponse_AttributeTableValidationError{
					field:  fmt.Sprintf("SelectedColumns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetMasterSegmentDetailResponse_AttributeTableMultiError(errors)
	}

	return nil
}

// GetMasterSegmentDetailResponse_AttributeTableMultiError is an error wrapping
// multiple validation errors returned by
// GetMasterSegmentDetailResponse_AttributeTable.ValidateAll() if the
// designated constraints aren't met.
type GetMasterSegmentDetailResponse_AttributeTableMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMasterSegmentDetailResponse_AttributeTableMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMasterSegmentDetailResponse_AttributeTableMultiError) AllErrors() []error { return m }

// GetMasterSegmentDetailResponse_AttributeTableValidationError is the
// validation error returned by
// GetMasterSegmentDetailResponse_AttributeTable.Validate if the designated
// constraints aren't met.
type GetMasterSegmentDetailResponse_AttributeTableValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMasterSegmentDetailResponse_AttributeTableValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMasterSegmentDetailResponse_AttributeTableValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetMasterSegmentDetailResponse_AttributeTableValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMasterSegmentDetailResponse_AttributeTableValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMasterSegmentDetailResponse_AttributeTableValidationError) ErrorName() string {
	return "GetMasterSegmentDetailResponse_AttributeTableValidationError"
}

// Error satisfies the builtin error interface
func (e GetMasterSegmentDetailResponse_AttributeTableValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMasterSegmentDetailResponse_AttributeTable.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMasterSegmentDetailResponse_AttributeTableValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMasterSegmentDetailResponse_AttributeTableValidationError{}

// Validate checks the field values on
// GetMasterSegmentDetailResponse_BehaviorTable with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetMasterSegmentDetailResponse_BehaviorTable) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetMasterSegmentDetailResponse_BehaviorTable with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetMasterSegmentDetailResponse_BehaviorTableMultiError, or nil if none found.
func (m *GetMasterSegmentDetailResponse_BehaviorTable) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMasterSegmentDetailResponse_BehaviorTable) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for RawTableId

	// no validation rules for RawTableName

	// no validation rules for ForeignKey

	// no validation rules for JoinKey

	for idx, item := range m.GetSchema() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMasterSegmentDetailResponse_BehaviorTableValidationError{
						field:  fmt.Sprintf("Schema[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMasterSegmentDetailResponse_BehaviorTableValidationError{
						field:  fmt.Sprintf("Schema[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMasterSegmentDetailResponse_BehaviorTableValidationError{
					field:  fmt.Sprintf("Schema[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetMasterSegmentDetailResponse_BehaviorTableMultiError(errors)
	}

	return nil
}

// GetMasterSegmentDetailResponse_BehaviorTableMultiError is an error wrapping
// multiple validation errors returned by
// GetMasterSegmentDetailResponse_BehaviorTable.ValidateAll() if the
// designated constraints aren't met.
type GetMasterSegmentDetailResponse_BehaviorTableMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMasterSegmentDetailResponse_BehaviorTableMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMasterSegmentDetailResponse_BehaviorTableMultiError) AllErrors() []error { return m }

// GetMasterSegmentDetailResponse_BehaviorTableValidationError is the
// validation error returned by
// GetMasterSegmentDetailResponse_BehaviorTable.Validate if the designated
// constraints aren't met.
type GetMasterSegmentDetailResponse_BehaviorTableValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMasterSegmentDetailResponse_BehaviorTableValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMasterSegmentDetailResponse_BehaviorTableValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMasterSegmentDetailResponse_BehaviorTableValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMasterSegmentDetailResponse_BehaviorTableValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMasterSegmentDetailResponse_BehaviorTableValidationError) ErrorName() string {
	return "GetMasterSegmentDetailResponse_BehaviorTableValidationError"
}

// Error satisfies the builtin error interface
func (e GetMasterSegmentDetailResponse_BehaviorTableValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMasterSegmentDetailResponse_BehaviorTable.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMasterSegmentDetailResponse_BehaviorTableValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMasterSegmentDetailResponse_BehaviorTableValidationError{}

// Validate checks the field values on
// GetListPredictionActionsResponse_PredictionAction with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetListPredictionActionsResponse_PredictionAction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetListPredictionActionsResponse_PredictionAction with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// GetListPredictionActionsResponse_PredictionActionMultiError, or nil if none found.
func (m *GetListPredictionActionsResponse_PredictionAction) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListPredictionActionsResponse_PredictionAction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ModelId

	// no validation rules for ModelName

	// no validation rules for Status

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return GetListPredictionActionsResponse_PredictionActionMultiError(errors)
	}

	return nil
}

// GetListPredictionActionsResponse_PredictionActionMultiError is an error
// wrapping multiple validation errors returned by
// GetListPredictionActionsResponse_PredictionAction.ValidateAll() if the
// designated constraints aren't met.
type GetListPredictionActionsResponse_PredictionActionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListPredictionActionsResponse_PredictionActionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListPredictionActionsResponse_PredictionActionMultiError) AllErrors() []error { return m }

// GetListPredictionActionsResponse_PredictionActionValidationError is the
// validation error returned by
// GetListPredictionActionsResponse_PredictionAction.Validate if the
// designated constraints aren't met.
type GetListPredictionActionsResponse_PredictionActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListPredictionActionsResponse_PredictionActionValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetListPredictionActionsResponse_PredictionActionValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetListPredictionActionsResponse_PredictionActionValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetListPredictionActionsResponse_PredictionActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListPredictionActionsResponse_PredictionActionValidationError) ErrorName() string {
	return "GetListPredictionActionsResponse_PredictionActionValidationError"
}

// Error satisfies the builtin error interface
func (e GetListPredictionActionsResponse_PredictionActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListPredictionActionsResponse_PredictionAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListPredictionActionsResponse_PredictionActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListPredictionActionsResponse_PredictionActionValidationError{}

// Validate checks the field values on
// GetDataActionRunsPerDayResponse_TotalActionRunsPerDay with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDataActionRunsPerDayResponse_TotalActionRunsPerDay) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetDataActionRunsPerDayResponse_TotalActionRunsPerDay with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDataActionRunsPerDayResponse_TotalActionRunsPerDayMultiError, or nil if
// none found.
func (m *GetDataActionRunsPerDayResponse_TotalActionRunsPerDay) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDataActionRunsPerDayResponse_TotalActionRunsPerDay) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Date

	// no validation rules for Total

	if len(errors) > 0 {
		return GetDataActionRunsPerDayResponse_TotalActionRunsPerDayMultiError(errors)
	}

	return nil
}

// GetDataActionRunsPerDayResponse_TotalActionRunsPerDayMultiError is an error
// wrapping multiple validation errors returned by
// GetDataActionRunsPerDayResponse_TotalActionRunsPerDay.ValidateAll() if the
// designated constraints aren't met.
type GetDataActionRunsPerDayResponse_TotalActionRunsPerDayMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDataActionRunsPerDayResponse_TotalActionRunsPerDayMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDataActionRunsPerDayResponse_TotalActionRunsPerDayMultiError) AllErrors() []error {
	return m
}

// GetDataActionRunsPerDayResponse_TotalActionRunsPerDayValidationError is the
// validation error returned by
// GetDataActionRunsPerDayResponse_TotalActionRunsPerDay.Validate if the
// designated constraints aren't met.
type GetDataActionRunsPerDayResponse_TotalActionRunsPerDayValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDataActionRunsPerDayResponse_TotalActionRunsPerDayValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetDataActionRunsPerDayResponse_TotalActionRunsPerDayValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetDataActionRunsPerDayResponse_TotalActionRunsPerDayValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetDataActionRunsPerDayResponse_TotalActionRunsPerDayValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e GetDataActionRunsPerDayResponse_TotalActionRunsPerDayValidationError) ErrorName() string {
	return "GetDataActionRunsPerDayResponse_TotalActionRunsPerDayValidationError"
}

// Error satisfies the builtin error interface
func (e GetDataActionRunsPerDayResponse_TotalActionRunsPerDayValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDataActionRunsPerDayResponse_TotalActionRunsPerDay.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDataActionRunsPerDayResponse_TotalActionRunsPerDayValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDataActionRunsPerDayResponse_TotalActionRunsPerDayValidationError{}

// Validate checks the field values on
// GetDataRunsProportionResponse_CategoryCount with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetDataRunsProportionResponse_CategoryCount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetDataRunsProportionResponse_CategoryCount with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetDataRunsProportionResponse_CategoryCountMultiError, or nil if none found.
func (m *GetDataRunsProportionResponse_CategoryCount) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDataRunsProportionResponse_CategoryCount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Category

	// no validation rules for Count

	if len(errors) > 0 {
		return GetDataRunsProportionResponse_CategoryCountMultiError(errors)
	}

	return nil
}

// GetDataRunsProportionResponse_CategoryCountMultiError is an error wrapping
// multiple validation errors returned by
// GetDataRunsProportionResponse_CategoryCount.ValidateAll() if the designated
// constraints aren't met.
type GetDataRunsProportionResponse_CategoryCountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDataRunsProportionResponse_CategoryCountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDataRunsProportionResponse_CategoryCountMultiError) AllErrors() []error { return m }

// GetDataRunsProportionResponse_CategoryCountValidationError is the validation
// error returned by GetDataRunsProportionResponse_CategoryCount.Validate if
// the designated constraints aren't met.
type GetDataRunsProportionResponse_CategoryCountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDataRunsProportionResponse_CategoryCountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDataRunsProportionResponse_CategoryCountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDataRunsProportionResponse_CategoryCountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDataRunsProportionResponse_CategoryCountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDataRunsProportionResponse_CategoryCountValidationError) ErrorName() string {
	return "GetDataRunsProportionResponse_CategoryCountValidationError"
}

// Error satisfies the builtin error interface
func (e GetDataRunsProportionResponse_CategoryCountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDataRunsProportionResponse_CategoryCount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDataRunsProportionResponse_CategoryCountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDataRunsProportionResponse_CategoryCountValidationError{}
