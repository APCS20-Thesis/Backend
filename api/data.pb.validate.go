// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: data.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Account with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Account) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Username

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for Email

	// no validation rules for Phone

	// no validation rules for Country

	// no validation rules for Company

	// no validation rules for Position

	return nil
}

// AccountValidationError is the validation error returned by Account.Validate
// if the designated constraints aren't met.
type AccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountValidationError) ErrorName() string { return "AccountValidationError" }

// Error satisfies the builtin error interface
func (e AccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountValidationError{}

// Validate checks the field values on Setting with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Setting) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for NotifyCreateSource

	// no validation rules for NotifyCreateDestination

	// no validation rules for NotifyCreateMasterSegment

	// no validation rules for NotifyCreateSegment

	return nil
}

// SettingValidationError is the validation error returned by Setting.Validate
// if the designated constraints aren't met.
type SettingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SettingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SettingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SettingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SettingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SettingValidationError) ErrorName() string { return "SettingValidationError" }

// Error satisfies the builtin error interface
func (e SettingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SettingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SettingValidationError{}

// Validate checks the field values on MappingOptionItem with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MappingOptionItem) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SourceFieldName

	// no validation rules for DestinationFieldName

	return nil
}

// MappingOptionItemValidationError is the validation error returned by
// MappingOptionItem.Validate if the designated constraints aren't met.
type MappingOptionItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MappingOptionItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MappingOptionItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MappingOptionItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MappingOptionItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MappingOptionItemValidationError) ErrorName() string {
	return "MappingOptionItemValidationError"
}

// Error satisfies the builtin error interface
func (e MappingOptionItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMappingOptionItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MappingOptionItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MappingOptionItemValidationError{}

// Validate checks the field values on ImportCsvConfigurations with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ImportCsvConfigurations) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetDelimiter()) != 1 {
		return ImportCsvConfigurationsValidationError{
			field:  "Delimiter",
			reason: "value length must be 1 runes",
		}

	}

	if m.GetSkipRows() <= -1 {
		return ImportCsvConfigurationsValidationError{
			field:  "SkipRows",
			reason: "value must be greater than -1",
		}
	}

	// no validation rules for MultiLine

	return nil
}

// ImportCsvConfigurationsValidationError is the validation error returned by
// ImportCsvConfigurations.Validate if the designated constraints aren't met.
type ImportCsvConfigurationsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportCsvConfigurationsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportCsvConfigurationsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportCsvConfigurationsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportCsvConfigurationsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportCsvConfigurationsValidationError) ErrorName() string {
	return "ImportCsvConfigurationsValidationError"
}

// Error satisfies the builtin error interface
func (e ImportCsvConfigurationsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportCsvConfigurations.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportCsvConfigurationsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportCsvConfigurationsValidationError{}

// Validate checks the field values on TransferredColumn with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TransferredColumn) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TableColumnName

	// no validation rules for NewTableColumnName

	return nil
}

// TransferredColumnValidationError is the validation error returned by
// TransferredColumn.Validate if the designated constraints aren't met.
type TransferredColumnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferredColumnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferredColumnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferredColumnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferredColumnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferredColumnValidationError) ErrorName() string {
	return "TransferredColumnValidationError"
}

// Error satisfies the builtin error interface
func (e TransferredColumnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferredColumn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferredColumnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferredColumnValidationError{}

// Validate checks the field values on SchemaColumn with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SchemaColumn) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ColumnName

	// no validation rules for DataType

	return nil
}

// SchemaColumnValidationError is the validation error returned by
// SchemaColumn.Validate if the designated constraints aren't met.
type SchemaColumnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SchemaColumnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SchemaColumnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SchemaColumnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SchemaColumnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SchemaColumnValidationError) ErrorName() string { return "SchemaColumnValidationError" }

// Error satisfies the builtin error interface
func (e SchemaColumnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSchemaColumn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SchemaColumnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SchemaColumnValidationError{}

// Validate checks the field values on MasterSegment with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MasterSegment) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Status

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	return nil
}

// MasterSegmentValidationError is the validation error returned by
// MasterSegment.Validate if the designated constraints aren't met.
type MasterSegmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MasterSegmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MasterSegmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MasterSegmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MasterSegmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MasterSegmentValidationError) ErrorName() string { return "MasterSegmentValidationError" }

// Error satisfies the builtin error interface
func (e MasterSegmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMasterSegment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MasterSegmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MasterSegmentValidationError{}

// Validate checks the field values on MasterSegmentDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MasterSegmentDetail) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Status

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for AudienceTableId

	// no validation rules for MainRawTableId

	// no validation rules for MainRawTableName

	for idx, item := range m.GetAttributeTables() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MasterSegmentDetailValidationError{
					field:  fmt.Sprintf("AttributeTables[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetBehaviorTables() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MasterSegmentDetailValidationError{
					field:  fmt.Sprintf("BehaviorTables[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAudienceSchema() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MasterSegmentDetailValidationError{
					field:  fmt.Sprintf("AudienceSchema[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MasterSegmentDetailValidationError is the validation error returned by
// MasterSegmentDetail.Validate if the designated constraints aren't met.
type MasterSegmentDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MasterSegmentDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MasterSegmentDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MasterSegmentDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MasterSegmentDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MasterSegmentDetailValidationError) ErrorName() string {
	return "MasterSegmentDetailValidationError"
}

// Error satisfies the builtin error interface
func (e MasterSegmentDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMasterSegmentDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MasterSegmentDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MasterSegmentDetailValidationError{}

// Validate checks the field values on Segment with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Segment) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for MasterSegmentId

	// no validation rules for MasterSegmentName

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for Status

	return nil
}

// SegmentValidationError is the validation error returned by Segment.Validate
// if the designated constraints aren't met.
type SegmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SegmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SegmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SegmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SegmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SegmentValidationError) ErrorName() string { return "SegmentValidationError" }

// Error satisfies the builtin error interface
func (e SegmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSegment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SegmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SegmentValidationError{}

// Validate checks the field values on MappingGophishProfile with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MappingGophishProfile) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Email

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for Position

	return nil
}

// MappingGophishProfileValidationError is the validation error returned by
// MappingGophishProfile.Validate if the designated constraints aren't met.
type MappingGophishProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MappingGophishProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MappingGophishProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MappingGophishProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MappingGophishProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MappingGophishProfileValidationError) ErrorName() string {
	return "MappingGophishProfileValidationError"
}

// Error satisfies the builtin error interface
func (e MappingGophishProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMappingGophishProfile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MappingGophishProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MappingGophishProfileValidationError{}

// Validate checks the field values on DataDestination with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DataDestination) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	return nil
}

// DataDestinationValidationError is the validation error returned by
// DataDestination.Validate if the designated constraints aren't met.
type DataDestinationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataDestinationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataDestinationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataDestinationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataDestinationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataDestinationValidationError) ErrorName() string { return "DataDestinationValidationError" }

// Error satisfies the builtin error interface
func (e DataDestinationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataDestination.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataDestinationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataDestinationValidationError{}

// Validate checks the field values on DataSource with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *DataSource) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DataSourceValidationError is the validation error returned by
// DataSource.Validate if the designated constraints aren't met.
type DataSourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataSourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataSourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataSourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataSourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataSourceValidationError) ErrorName() string { return "DataSourceValidationError" }

// Error satisfies the builtin error interface
func (e DataSourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataSourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataSourceValidationError{}

// Validate checks the field values on DataSourceDetail with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DataSourceDetail) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Type

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for ConnectionId

	return nil
}

// DataSourceDetailValidationError is the validation error returned by
// DataSourceDetail.Validate if the designated constraints aren't met.
type DataSourceDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataSourceDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataSourceDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataSourceDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataSourceDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataSourceDetailValidationError) ErrorName() string { return "DataSourceDetailValidationError" }

// Error satisfies the builtin error interface
func (e DataSourceDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataSourceDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataSourceDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataSourceDetailValidationError{}

// Validate checks the field values on EnrichedDataSource with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EnrichedDataSource) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Type

	return nil
}

// EnrichedDataSourceValidationError is the validation error returned by
// EnrichedDataSource.Validate if the designated constraints aren't met.
type EnrichedDataSourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnrichedDataSourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnrichedDataSourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnrichedDataSourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnrichedDataSourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnrichedDataSourceValidationError) ErrorName() string {
	return "EnrichedDataSourceValidationError"
}

// Error satisfies the builtin error interface
func (e EnrichedDataSourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnrichedDataSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnrichedDataSourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnrichedDataSourceValidationError{}

// Validate checks the field values on EnrichedDataDestination with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EnrichedDataDestination) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Type

	return nil
}

// EnrichedDataDestinationValidationError is the validation error returned by
// EnrichedDataDestination.Validate if the designated constraints aren't met.
type EnrichedDataDestinationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnrichedDataDestinationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnrichedDataDestinationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnrichedDataDestinationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnrichedDataDestinationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnrichedDataDestinationValidationError) ErrorName() string {
	return "EnrichedDataDestinationValidationError"
}

// Error satisfies the builtin error interface
func (e EnrichedDataDestinationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnrichedDataDestination.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnrichedDataDestinationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnrichedDataDestinationValidationError{}

// Validate checks the field values on SegmentCondition with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SegmentCondition) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetAudienceCondition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SegmentConditionValidationError{
				field:  "AudienceCondition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AudienceSqlCondition

	for idx, item := range m.GetBehaviorConditions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SegmentConditionValidationError{
					field:  fmt.Sprintf("BehaviorConditions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SegmentConditionValidationError is the validation error returned by
// SegmentCondition.Validate if the designated constraints aren't met.
type SegmentConditionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SegmentConditionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SegmentConditionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SegmentConditionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SegmentConditionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SegmentConditionValidationError) ErrorName() string { return "SegmentConditionValidationError" }

// Error satisfies the builtin error interface
func (e SegmentConditionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSegmentCondition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SegmentConditionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SegmentConditionValidationError{}

// Validate checks the field values on BehaviorCondition with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *BehaviorCondition) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for BehaviorTableId

	if v, ok := interface{}(m.GetWhereCondition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BehaviorConditionValidationError{
				field:  "WhereCondition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for WhereSqlCondition

	for idx, item := range m.GetHavingConditions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BehaviorConditionValidationError{
					field:  fmt.Sprintf("HavingConditions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// BehaviorConditionValidationError is the validation error returned by
// BehaviorCondition.Validate if the designated constraints aren't met.
type BehaviorConditionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BehaviorConditionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BehaviorConditionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BehaviorConditionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BehaviorConditionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BehaviorConditionValidationError) ErrorName() string {
	return "BehaviorConditionValidationError"
}

// Error satisfies the builtin error interface
func (e BehaviorConditionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBehaviorCondition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BehaviorConditionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BehaviorConditionValidationError{}

// Validate checks the field values on Rule with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Rule) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Field

	// no validation rules for Operator

	// no validation rules for Value

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RuleValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Combinator

	return nil
}

// RuleValidationError is the validation error returned by Rule.Validate if the
// designated constraints aren't met.
type RuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuleValidationError) ErrorName() string { return "RuleValidationError" }

// Error satisfies the builtin error interface
func (e RuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuleValidationError{}

// Validate checks the field values on DataActionRun with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DataActionRun) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for ActionId

	// no validation rules for ActionType

	// no validation rules for Status

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DataActionRunValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DataActionRunValidationError is the validation error returned by
// DataActionRun.Validate if the designated constraints aren't met.
type DataActionRunValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataActionRunValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataActionRunValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataActionRunValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataActionRunValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataActionRunValidationError) ErrorName() string { return "DataActionRunValidationError" }

// Error satisfies the builtin error interface
func (e DataActionRunValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataActionRun.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataActionRunValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataActionRunValidationError{}

// Validate checks the field values on PredictModel with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PredictModel) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for MasterSegmentId

	// no validation rules for Status

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	return nil
}

// PredictModelValidationError is the validation error returned by
// PredictModel.Validate if the designated constraints aren't met.
type PredictModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PredictModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PredictModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PredictModelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PredictModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PredictModelValidationError) ErrorName() string { return "PredictModelValidationError" }

// Error satisfies the builtin error interface
func (e PredictModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPredictModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PredictModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PredictModelValidationError{}

// Validate checks the field values on EnrichedConnection with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EnrichedConnection) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Type

	return nil
}

// EnrichedConnectionValidationError is the validation error returned by
// EnrichedConnection.Validate if the designated constraints aren't met.
type EnrichedConnectionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnrichedConnectionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnrichedConnectionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnrichedConnectionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnrichedConnectionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnrichedConnectionValidationError) ErrorName() string {
	return "EnrichedConnectionValidationError"
}

// Error satisfies the builtin error interface
func (e EnrichedConnectionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnrichedConnection.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnrichedConnectionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnrichedConnectionValidationError{}

// Validate checks the field values on EnrichedTable with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EnrichedTable) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	return nil
}

// EnrichedTableValidationError is the validation error returned by
// EnrichedTable.Validate if the designated constraints aren't met.
type EnrichedTableValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnrichedTableValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnrichedTableValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnrichedTableValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnrichedTableValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnrichedTableValidationError) ErrorName() string { return "EnrichedTableValidationError" }

// Error satisfies the builtin error interface
func (e EnrichedTableValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnrichedTable.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnrichedTableValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnrichedTableValidationError{}

// Validate checks the field values on SourceTableMap with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SourceTableMap) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if v, ok := interface{}(m.GetTable()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SourceTableMapValidationError{
				field:  "Table",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SourceTableMapValidationError{
				field:  "Source",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetMappings() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SourceTableMapValidationError{
					field:  fmt.Sprintf("Mappings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for DataActionId

	return nil
}

// SourceTableMapValidationError is the validation error returned by
// SourceTableMap.Validate if the designated constraints aren't met.
type SourceTableMapValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SourceTableMapValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SourceTableMapValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SourceTableMapValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SourceTableMapValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SourceTableMapValidationError) ErrorName() string { return "SourceTableMapValidationError" }

// Error satisfies the builtin error interface
func (e SourceTableMapValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSourceTableMap.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SourceTableMapValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SourceTableMapValidationError{}

// Validate checks the field values on DestinationMappings with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DestinationMappings) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Type

	// no validation rules for ObjectType

	// no validation rules for ObjectName

	// no validation rules for ObjectId

	for idx, item := range m.GetMappings() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DestinationMappingsValidationError{
					field:  fmt.Sprintf("Mappings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for DataActionId

	return nil
}

// DestinationMappingsValidationError is the validation error returned by
// DestinationMappings.Validate if the designated constraints aren't met.
type DestinationMappingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DestinationMappingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DestinationMappingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DestinationMappingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DestinationMappingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DestinationMappingsValidationError) ErrorName() string {
	return "DestinationMappingsValidationError"
}

// Error satisfies the builtin error interface
func (e DestinationMappingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDestinationMappings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DestinationMappingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DestinationMappingsValidationError{}

// Validate checks the field values on EnrichedMasterSegment with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EnrichedMasterSegment) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	return nil
}

// EnrichedMasterSegmentValidationError is the validation error returned by
// EnrichedMasterSegment.Validate if the designated constraints aren't met.
type EnrichedMasterSegmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnrichedMasterSegmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnrichedMasterSegmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnrichedMasterSegmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnrichedMasterSegmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnrichedMasterSegmentValidationError) ErrorName() string {
	return "EnrichedMasterSegmentValidationError"
}

// Error satisfies the builtin error interface
func (e EnrichedMasterSegmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnrichedMasterSegment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnrichedMasterSegmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnrichedMasterSegmentValidationError{}

// Validate checks the field values on EnrichedSegment with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *EnrichedSegment) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	return nil
}

// EnrichedSegmentValidationError is the validation error returned by
// EnrichedSegment.Validate if the designated constraints aren't met.
type EnrichedSegmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnrichedSegmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnrichedSegmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnrichedSegmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnrichedSegmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnrichedSegmentValidationError) ErrorName() string { return "EnrichedSegmentValidationError" }

// Error satisfies the builtin error interface
func (e EnrichedSegmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnrichedSegment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnrichedSegmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnrichedSegmentValidationError{}

// Validate checks the field values on MasterSegmentDetail_AttributeTable with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *MasterSegmentDetail_AttributeTable) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RawTableId

	// no validation rules for RawTableName

	// no validation rules for ForeignKey

	// no validation rules for JoinKey

	for idx, item := range m.GetSelectedColumns() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MasterSegmentDetail_AttributeTableValidationError{
					field:  fmt.Sprintf("SelectedColumns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MasterSegmentDetail_AttributeTableValidationError is the validation error
// returned by MasterSegmentDetail_AttributeTable.Validate if the designated
// constraints aren't met.
type MasterSegmentDetail_AttributeTableValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MasterSegmentDetail_AttributeTableValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MasterSegmentDetail_AttributeTableValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MasterSegmentDetail_AttributeTableValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MasterSegmentDetail_AttributeTableValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MasterSegmentDetail_AttributeTableValidationError) ErrorName() string {
	return "MasterSegmentDetail_AttributeTableValidationError"
}

// Error satisfies the builtin error interface
func (e MasterSegmentDetail_AttributeTableValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMasterSegmentDetail_AttributeTable.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MasterSegmentDetail_AttributeTableValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MasterSegmentDetail_AttributeTableValidationError{}

// Validate checks the field values on MasterSegmentDetail_BehaviorTable with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *MasterSegmentDetail_BehaviorTable) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for RawTableId

	// no validation rules for RawTableName

	// no validation rules for ForeignKey

	// no validation rules for JoinKey

	for idx, item := range m.GetSchema() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MasterSegmentDetail_BehaviorTableValidationError{
					field:  fmt.Sprintf("Schema[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MasterSegmentDetail_BehaviorTableValidationError is the validation error
// returned by MasterSegmentDetail_BehaviorTable.Validate if the designated
// constraints aren't met.
type MasterSegmentDetail_BehaviorTableValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MasterSegmentDetail_BehaviorTableValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MasterSegmentDetail_BehaviorTableValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MasterSegmentDetail_BehaviorTableValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MasterSegmentDetail_BehaviorTableValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MasterSegmentDetail_BehaviorTableValidationError) ErrorName() string {
	return "MasterSegmentDetail_BehaviorTableValidationError"
}

// Error satisfies the builtin error interface
func (e MasterSegmentDetail_BehaviorTableValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMasterSegmentDetail_BehaviorTable.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MasterSegmentDetail_BehaviorTableValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MasterSegmentDetail_BehaviorTableValidationError{}

// Validate checks the field values on BehaviorCondition_HavingCondition with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *BehaviorCondition_HavingCondition) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Combinator

	return nil
}

// BehaviorCondition_HavingConditionValidationError is the validation error
// returned by BehaviorCondition_HavingCondition.Validate if the designated
// constraints aren't met.
type BehaviorCondition_HavingConditionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BehaviorCondition_HavingConditionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BehaviorCondition_HavingConditionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BehaviorCondition_HavingConditionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BehaviorCondition_HavingConditionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BehaviorCondition_HavingConditionValidationError) ErrorName() string {
	return "BehaviorCondition_HavingConditionValidationError"
}

// Error satisfies the builtin error interface
func (e BehaviorCondition_HavingConditionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBehaviorCondition_HavingCondition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BehaviorCondition_HavingConditionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BehaviorCondition_HavingConditionValidationError{}

// Validate checks the field values on DataActionRun_MetaData with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DataActionRun_MetaData) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetObjectReference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DataActionRun_MetaDataValidationError{
				field:  "ObjectReference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DataActionRun_MetaDataValidationError is the validation error returned by
// DataActionRun_MetaData.Validate if the designated constraints aren't met.
type DataActionRun_MetaDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataActionRun_MetaDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataActionRun_MetaDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataActionRun_MetaDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataActionRun_MetaDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataActionRun_MetaDataValidationError) ErrorName() string {
	return "DataActionRun_MetaDataValidationError"
}

// Error satisfies the builtin error interface
func (e DataActionRun_MetaDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataActionRun_MetaData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataActionRun_MetaDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataActionRun_MetaDataValidationError{}

// Validate checks the field values on DataActionRun_ObjectReference with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DataActionRun_ObjectReference) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Type

	// no validation rules for Name

	// no validation rules for Id

	return nil
}

// DataActionRun_ObjectReferenceValidationError is the validation error
// returned by DataActionRun_ObjectReference.Validate if the designated
// constraints aren't met.
type DataActionRun_ObjectReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataActionRun_ObjectReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataActionRun_ObjectReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataActionRun_ObjectReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataActionRun_ObjectReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataActionRun_ObjectReferenceValidationError) ErrorName() string {
	return "DataActionRun_ObjectReferenceValidationError"
}

// Error satisfies the builtin error interface
func (e DataActionRun_ObjectReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataActionRun_ObjectReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataActionRun_ObjectReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataActionRun_ObjectReferenceValidationError{}
