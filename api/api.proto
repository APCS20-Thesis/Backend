syntax = "proto3";
package api;
option go_package = "github.com/APCS20-Thesis/Backend/api";

import "google/rpc/code.proto";
import "google/api/annotations.proto";
import "google/protobuf/wrappers.proto";
import "data.proto";
import "validate/validate.proto";

service CDPService {
  rpc CheckHealth(CheckHealthRequest) returns (CommonResponse) {
    option (google.api.http) = {
      get: "/health"
    };
  }

  rpc Login(LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post : "/api/v1/auth/login"
      body : "*"
    };
  }

  rpc SignUp(SignUpRequest) returns (CommonResponse) {
    option (google.api.http) = {
      post : "/api/v1/auth/sign-up"
      body : "*"
    };
  }

  rpc GetAccountInfo(GetAccountInfoRequest) returns (GetAccountInfoResponse) {
    option (google.api.http) = {
      get : "/api/v1/auth/me"
    };
  }

  rpc UpdateAccountInfo(UpdateAccountInfoRequest) returns (UpdateAccountInfoResponse) {
    option (google.api.http) = {
      post : "/api/v1/auth/info"
      body: "*"
    };
  }

  rpc UpdateAccountSetting(UpdateAccountSettingRequest) returns (UpdateAccountSettingResponse) {
    option (google.api.http) = {
      post : "/api/v1/auth/setting"
      body: "*"
    };
  }

  rpc GetListDataSources(GetListDataSourcesRequest) returns (GetListDataSourcesResponse){
    option (google.api.http) = {
      get: "/api/v1/data-source/data-sources"
    };
  }

  rpc GetDataSource(GetDataSourceRequest) returns (GetDataSourceResponse){
    option (google.api.http) = {
      get: "/api/v1/data-source/data-source/{id}"
    };
  }

  rpc GetListDataTables(GetListDataTablesRequest) returns (GetListDataTablesResponse){
    option (google.api.http) = {
      get: "/api/v1/data-source/data-tables"
    };
  }

  rpc GetDataTable(GetDataTableRequest) returns (GetDataTableResponse){
    option (google.api.http) = {
      get: "/api/v1/data-source/data-table/{id}"
    };
  }

  rpc GetQueryDataTable(GetQueryDataTableRequest) returns (GetQueryDataTableResponse){
    option (google.api.http) = {
      get: "/api/v1/data-source/data-table/{id}/data"
    };
  }

  rpc GetConnection(GetConnectionRequest) returns (GetConnectionResponse){
    option (google.api.http) = {
      get: "/api/v1/data-source/connection/{id}"
    };
  }
  rpc GetListConnections(GetListConnectionsRequest) returns (GetListConnectionsResponse){
    option (google.api.http) = {
      get: "/api/v1/connections"
    };
  }

  rpc CreateConnection(CreateConnectionRequest) returns (CreateConnectionResponse){
    option (google.api.http) = {
      post: "/api/v1/connection"
      body: "*"
    };
  }
  rpc UpdateConnection(UpdateConnectionRequest) returns (UpdateConnectionResponse){
    option (google.api.http) = {
      post: "/api/v1/connection/{id}"
      body: "*"
    };
  }
  rpc DeleteConnection(DeleteConnectionRequest) returns (DeleteConnectionResponse){
    option (google.api.http) = {
      delete: "/api/v1/connection/{id}"
    };
  }

  rpc ExportDataToFile(ExportDataToFileRequest) returns (ExportDataToFileResponse) {
    option (google.api.http) = {
      post: "/api/v1/data-destination/s3/file"
      body: "*"
    };
  }

  rpc ImportCsvFromS3(ImportCsvFromS3Request) returns (ImportCsvFromS3Response) {
    option (google.api.http) = {
      post: "/api/v1/data-source/s3/import-csv"
      body: "*"
    };
  }

  rpc GetListFileExportRecords(GetListFileExportRecordsRequest) returns (GetListFileExportRecordsResponse) {
    option (google.api.http) = {
      get: "/api/v1/data-table/{id}/export"
    };
  }

  rpc CreateMasterSegment(CreateMasterSegmentRequest) returns (CreateMasterSegmentResponse) {
    option (google.api.http) = {
      post: "/api/v1/master-segment"
      body: "*"
    };
  }

  rpc GetListMasterSegments(GetListMasterSegmentsRequest) returns (GetListMasterSegmentsResponse) {
    option (google.api.http) = {
      get: "/api/v1/master-segment"
    };
  }

  rpc GetMasterSegmentDetail(GetMasterSegmentDetailRequest) returns (GetMasterSegmentDetailResponse) {
    option (google.api.http) = {
      get: "/api/v1/master-segment/{id}"
    };
  }

  rpc CreateSegment(CreateSegmentRequest) returns (CreateSegmentResponse) {
    option (google.api.http) = {
      post: "/api/v1/segment"
      body: "*"
    };
  }

  rpc GetListSegments(GetListSegmentsRequest) returns (GetListSegmentsResponse) {
    option (google.api.http) = {
      get: "/api/v1/segment"
    };
  }

  rpc GetSegmentDetail(GetSegmentDetailRequest) returns (GetSegmentDetailResponse) {
    option (google.api.http) = {
      get: "/api/v1/segment/{id}"
    };
  }

  rpc CreateGophishUserGroupFromSegment(CreateGophishUserGroupFromSegmentRequest) returns (CreateGophishUserGroupFromSegmentResponse) {
    option (google.api.http) = {
      post: "/api/v1/gophish/user-group"
      body: "*"
    };
  }

  rpc ImportFromMySQLSource(ImportFromMySQLSourceRequest) returns (ImportFromMySQLSourceResponse) {
    option (google.api.http) = {
      post: "/api/v1/data-source/mysql"
      body: "*"
    };
  }

  rpc ExportToMySQLDestination(ExportToMySQLDestinationRequest) returns (ExportToMySQLDestinationResponse) {
    option (google.api.http) = {
      post: "/api/v1/data-destination/mysql"
      body: "*"
    };
  }

  rpc GetListDataDestinations(GetListDataDestinationsRequest) returns (GetListDataDestinationsResponse) {
    option (google.api.http) = {
      get: "/api/v1/data-destinations"
    };
  }

  rpc GetListDataActions(GetListDataActionsRequest) returns (GetListDataActionsResponse) {
    option (google.api.http) = {
      get: "/api/v1/data-actions"
    };
  }

  rpc TrainPredictModel(TrainPredictModelRequest) returns (TrainPredictModelResponse) {
    option (google.api.http) = {
      post: "/api/v1/predict-model"
      body: "*"
    };
  }

  rpc GetListPredictModels(GetListPredictModelsRequest) returns (GetListPredictModelsResponse) {
    option (google.api.http) = {
      get: "/api/v1/predict-models"
    };
  }
}

// CheckHealthRequest
message CheckHealthRequest { }

//*****************************************//
// Authentication
//*****************************************//

// LoginRequest
message LoginRequest {
  // username
  string username = 1 [(validate.rules).string.min_len = 1];
  // password
  string password = 2 [(validate.rules).string.min_len = 8];
}

// LoginResponse
message LoginResponse {
  // code
  int32 code = 1;
  // message
  string message = 2;
  // access_token
  string access_token = 3;
}

// Signup Request
message SignUpRequest {
  // username
  string username = 1 [(validate.rules).string.min_len = 1];
  // password
  string password = 2 [(validate.rules).string.min_len = 8];
  // first_name
  string first_name = 3 [(validate.rules).string.min_len = 1];
  // last_name
  string last_name = 4 [(validate.rules).string.min_len = 1];
  // email
  string email = 5 [(validate.rules).string.email = true];
}

// GetAccountInfo Request
message GetAccountInfoRequest { }

// GetAccountInfo Response
message GetAccountInfoResponse {
  // code
  int32 code = 1;
  // message
  string message = 2;
  // account
  Account account = 3;
  // setting
  Setting setting = 4;
}

// UpdateAccountInfo Request
message UpdateAccountInfoRequest {
  // phone
  string phone = 1;
  // country
  string country = 2 [(validate.rules).string.len = 2];
  // company
  string company = 3;
  // position
  string position = 4;
  // first_name
  string first_name = 5;
  // last_name
  string last_name = 6;
}

// UpdateAccountInfo Response
message UpdateAccountInfoResponse {
  // code
  int32 code = 1;
  // message
  string message = 2;
  // account
  Account account = 3;
}

// UpdateAccountSetting Request
message UpdateAccountSettingRequest {
  // notify_create_source
  google.protobuf.BoolValue notify_create_source = 1;
  // notify_create_destination
  google.protobuf.BoolValue notify_create_destination = 2;
  // notify_create_master_segment
  google.protobuf.BoolValue notify_create_master_segment = 3;
  // notify_create_segment
  google.protobuf.BoolValue notify_create_segment = 4;
}

// UpdateAccountSetting Response
message UpdateAccountSettingResponse {
  int32 code = 1;
  // message
  string message = 2;
  // setting
  Setting setting = 3;
}

// Common Response
message CommonResponse {
  // code
  int32 code = 1;
  // message
  string message = 2;
}

// ImportCsv Request
message  ImportCsvRequest {
  // file_name
  string file_name = 1 [(validate.rules).string.min_len = 1];
  // file_size
  int64 file_size = 2;
  // mapping option
  repeated MappingOptionItem mapping_options = 3;
  // connection id
  int64 connection_id = 4 [(validate.rules).int64.gt = -1];
  // configuration
  ImportCsvConfigurations configurations = 5;
  // file_content
  bytes file_content = 6;
  // table_id
  int64 table_id = 7 [(validate.rules).int64.gt = -1];
  // new_table_name
  string new_table_name = 8;
  // name
  string name = 9 [(validate.rules).string.min_len = 1];
  // description
  string description = 10;
  // key s3
  string key = 11;
  // write mode
  string write_mode = 12;
}

// ImportCsv Response
message ImportCsvResponse {
  // code
  int32 code = 1;
  //message
  string message = 2;
}

// GetListDataSources Request
message GetListDataSourcesRequest {
  // data_source type
  string type = 1;
  // name
  string name = 2;
}

// GetListDataSources Response
message GetListDataSourcesResponse {
  // code
  int32 code = 1;
  // count
  int64 count = 2;
  // results list
  repeated DataSource results = 3;

  message DataSource {
    // id
    int64 id = 1;
    // name
    string name = 2;
    // data_source type
    string type = 3;
    // updated_at
    string updated_at = 4;
  }

}

// GetDataSource Request
message GetDataSourceRequest {
  // id
  int64 id = 1 [(validate.rules).int64.gt = 0];
}

// GetDataSource Response
message GetDataSourceResponse {
  // code
  int32 code = 1;
  // id
  int64 id = 2;
  // name
  string name = 3;
  // data_source type
  string type = 4;
  // description
  string description = 6;
  // created_at
  string created_at = 7;
  // updated_at
  string updated_at = 8;
  // configurations
  map<string, string>configurations = 9;
  // mapping_options
  map<string, string> mapping_options = 10;
}

// GetListDataTables Request
message GetListDataTablesRequest {
  // name
  string name = 1;
  // page
  int32 page = 2;
  // page_size
  int32 page_size = 3;
}

// GetListDataSource Response
message GetListDataTablesResponse {
  // code
  int32 code = 1;
  // count
  int64 count = 2;
  // results list
  repeated DataTable results = 3;

  message DataTable {
    // id
    int64 id = 1;
    // name
    string name = 2;
    // created_at
    string created_at = 3;
    // updated_at
    string updated_at = 4;
    // sources
    repeated EnrichedDataSource data_sources = 5;
    // destinations
    repeated EnrichedDataDestination data_destinations = 6;
  }
}

// GetDataTable Request
message GetDataTableRequest {
  // id
  int64 id = 1 [(validate.rules).int64.gt = 0];
}

// GetDataTable Response
message GetDataTableResponse {
  // code
  int32 code = 1;
  // id
  int64 id = 2;
  // name
  string name = 3;
  // created_at
  string created_at = 4;
  // updated_at
  string updated_at = 5;
  // schema
  repeated SchemaColumn schema = 6;
}

// GetQueryDataTable Request
message GetQueryDataTableRequest {
  // id
  int64 id = 1 [(validate.rules).int64.gt = 0];
  // limit
  int32 limit = 2;
}

// GetQueryDataTable Response
message GetQueryDataTableResponse {
  // code
  int32 code = 1;
  // count
  int64 count = 2;
  // data
  repeated string data = 3;
}

// CreateConnection Request
message CreateConnectionRequest {
  // name
  string name = 1 [(validate.rules).string.min_len = 1];
  // type
  string type = 2 [(validate.rules).string.min_len = 1];
  // configurations
  map<string,string> configurations = 3;
}

// CreateConnection Response
message CreateConnectionResponse {
  // code
  int32 code = 1;
  // message
  string message = 2;
}

// GetListConnections Request
message GetListConnectionsRequest {
  // type
  string type = 1 [(validate.rules).string.min_len = 1];
  // name
  string name = 2 [(validate.rules).string.min_len = 1];
  // page
  int32 page = 3;
  // page_size
  int32 page_size = 4;
}

// GetListConnections Response
message GetListConnectionsResponse {
  // code
  int32 code = 1;
  // count
  int64 count = 2;
  // results list
  repeated Connection results = 3;

  message Connection {
    // id
    int64 id = 1;
    // name
    string name = 2;
    // type
    string type = 3;
    // updated_at
    string updated_at = 4;

    // data source
    repeated EnrichedDataSource data_sources = 5;
    // data destination
    repeated EnrichedDataDestination data_destinations = 6;
  }
}

// GetConnection Request
message GetConnectionRequest {
  // id
  int64 id = 1 [(validate.rules).int64.gt = 0];
}

// GetConnection Response
message GetConnectionResponse {
  // code
  int32 code = 1;
  // id
  int64 id = 2;
  // name
  string name = 3;
  // created_at
  string created_at = 4;
  // updated_at
  string updated_at = 5;
  // schema
  map<string, string> configurations = 6;
}

message UpdateConnectionRequest {
  // id
  int64 id = 1 [(validate.rules).int64.gt = 0];
  // name
  string name = 2;
  // type
  string type = 3;
  // configurations
  map<string,string> configurations = 4;
}

// CreateConnection Response
message UpdateConnectionResponse {
  // code
  int32 code = 1;
  // message
  string message = 2;
}

// DeleteConnection Request
message DeleteConnectionRequest {
  // id
  int64 id = 1 [(validate.rules).int64.gt = 0];
}

// DeleteConnection Response
message DeleteConnectionResponse {
  // code
  int32 code = 1;
  // message
  string message = 2;
}

// ExportDataToFileRequest
message ExportDataToFileRequest {
  // string file_name
  string file_name = 1;
  // file_type - Enum: CSV
  string file_type = 2;
  // connection_id - S3 connection id
  int64 connection_id = 3;
  // file_path
  string file_path = 4;
  // table_id - Table Id, cannot empty when exporting data table
  int64 table_id = 5;
  // segment_id - Segment Id, cannot empty when exporting segment
  int64 segment_id = 6;
  // master_segment_id - Master Segment Id, cannot empty when exporting master segment audience
  int64 master_segment_id = 7;
}

// ExportDataToFileCSVResponse
message ExportDataToFileResponse {
  // code
  int32 code = 1;
  // message
  string message = 2;
}

message GetListFileExportRecordsRequest {
  // id - Table Id
  int64 id = 1;
}

message GetListFileExportRecordsResponse {
  // code
  int32 code = 1;
  // message
  string message = 2;
  // results
  repeated FileExportRecord results = 3;

  message FileExportRecord {
    // id
    int64 id = 1;
    // data_table_id
    int64 data_table_id = 2;
    // format
    string format = 3;
    // status
    string status = 4;
    // download_url
    string download_url = 5;
    // expiration_time
    string expiration_time = 6;
    // created_at
    string created_at = 7;
  }
}

// ImportCsvFromS3Request
message ImportCsvFromS3Request {
  // file_name
  string file_name = 1 [(validate.rules).string.min_len = 1];
  // write mode
  string write_mode = 2;
  // mapping option
  repeated MappingOptionItem mapping_options = 3;
  // connection id
  int64 connection_id = 4 [(validate.rules).int64.gt = 0];
  // key s3
  string key = 5;
  // configuration
  ImportCsvConfigurations configurations = 6;
  // table_id
  int64 table_id = 7 [(validate.rules).int64.gt = 0];
  // new_table_name
  string new_table_name = 8;
  // name
  string name = 9 [(validate.rules).string.min_len = 1];
  // description
  string description = 10;

}

// ImportCsvFromS3Response
message ImportCsvFromS3Response {
  // code
  int32 code = 1;
  //message
  string message = 2;
}

//*****************************************//
// Segmentation
//*****************************************//

// CreateMasterSegmentRequest
message CreateMasterSegmentRequest {
  // name - Name of master segment
  string name = 1 [(validate.rules).string.min_len = 1];
  // description - Description of master segment
  string description = 2;
  // main_table_id - Id of main table to create audience
  int64 main_table_id = 3 [(validate.rules).int64.gt = 0];
  // selected_columns - List of selected column names and their corresponding new name in audience table. If empty, then select all columns and use default name.
  repeated TransferredColumn selected_columns = 4;
  // attribute_tables - List of attribute tables
  repeated AttributeTable attribute_tables = 5;
  // behavior_tables - List of behavior tables
  repeated BehaviorTable behavior_tables = 6;

  message AttributeTable {
    // table_id - Raw table id
    int64 table_id = 1 [(validate.rules).int64.gt = 0];
    // foreign_key - Key in attribute table
    string foreign_key = 2 [(validate.rules).string.min_len = 1];
    // join_key - Key in main table
    string join_key = 3 [(validate.rules).string.min_len = 1];
    // selected_columns - List of selected column names and their corresponding new name in audience table. If empty, then select all columns and use default name.
    repeated TransferredColumn selected_columns = 4 [(validate.rules).repeated.min_items = 1];
  }

  message BehaviorTable {
    // name - Name of behavior table
    string name = 1 [(validate.rules).string.min_len = 1];
    // table_id - Raw table id
    int64 table_id = 2 [(validate.rules).int64.gt = 0];
    // foreign_key - Key in behavior table
    string foreign_key = 3 [(validate.rules).string.min_len = 1];
    // join_key - Key in main table
    string join_key = 4 [(validate.rules).string.min_len = 1];
    // selected_columns - List of selected column names and their corresponding new name in behavior table. If empty, then select all columns and use default name.
    repeated TransferredColumn selected_columns = 5 [(validate.rules).repeated.min_items = 1];
  }
}

message CreateMasterSegmentResponse {
  // code
  int32 code = 1;
  //message
  string message = 2;
}

message GetListMasterSegmentsRequest {}

message GetListMasterSegmentsResponse {
  // code
  int32 code = 1;
  //message
  string message = 2;
  // count
  int64 count = 3;
  // results
  repeated MasterSegment results = 4;
}

message GetMasterSegmentDetailRequest {
  int64 id = 1 [(validate.rules).int64.gt = 0];
}

message GetMasterSegmentDetailResponse {
  // code
  int32 code = 1;
  //message
  string message = 2;
  // id
  int64 id = 3;
  // name
  string name = 4;
  // description
  string description = 5;
  // status
  string status = 6;
  // created_at
  string created_at = 7;
  // updated_at
  string updated_at = 8;
  // audience_table_id
  int64 audience_table_id = 9;
  // main_raw_table_id
  int64 main_raw_table_id = 10;
  // main_table_name
  string main_raw_table_name = 11;
  // attribute_tables
  repeated AttributeTable attribute_tables = 12;
  // behavior_tables
  repeated  BehaviorTable behavior_tables = 13;
  // audience schema
  repeated SchemaColumn audience_schema = 14;

  message AttributeTable {
    // table_id - Raw table id
    int64 raw_table_id = 1;
    // table_name
    string raw_table_name = 2;
    // foreign_key - Key in attribute table
    string foreign_key = 3;
    // join_key - Key in main table
    string join_key = 4;
    // selected_columns - List of selected column names and their corresponding new name in audience table. If empty, then select all columns and use default name.
    repeated TransferredColumn selected_columns = 5;
  }

  message BehaviorTable {
    int64 id = 1;
    // name - Name of behavior table
    string name = 2;
    // raw_table_id - Raw table id
    int64 raw_table_id = 3;
    // raw_table_name
    string raw_table_name = 4;
    // foreign_key - Key in behavior table
    string foreign_key = 5;
    // join_key - Key in main table
    string join_key = 6;
    // schema
    repeated SchemaColumn schema = 7;
  }
}

message CreateSegmentRequest {
  // master_segment_id
  int64 master_segment_id = 1 [(validate.rules).int64.gt = 0];
  // name
  string name = 2;
  // description
  string description = 3;
  // condition - Audience filter condition in json format
  Rule condition = 4;
  // sql_condition - Audience filter condition in SQL string format
  string sql_condition = 5;
  // behavior_conditions
  repeated BehaviorCondition behavior_conditions = 6;
}

message CreateSegmentResponse {
  // code
  int32 code = 1;
  //message
  string message = 2;
}

message GetListSegmentsRequest {
  repeated int64 master_segment_ids = 1;
}

message GetListSegmentsResponse {
  // code
  int32 code = 1;
  //message
  string message = 2;
  // count
  int64 count = 3;
  // results
  repeated Segment results = 4;
}

message GetSegmentDetailRequest {
  int64 id = 1;
}

message GetSegmentDetailResponse {
  // code
  int32 code = 1;
  // message
  string message = 2;
  // id
  int64 id = 3;
  // name
  string name = 4;
  // description
  string description = 5;
  // master_segment_id
  int64 master_segment_id = 6;
  // master_segment_name
  string master_segment_name = 7;
  // created_at
  string created_at = 8;
  // updated_at
  string updated_at = 9;
  // condition
  Rule condition = 10;
  // schema
  repeated SchemaColumn schema = 11;

  message Rule {
    string field = 1;
    string operator = 2;
    string value = 3;
    repeated Rule rules = 4;
    string combinator = 5;
  }
}

message CreateGophishUserGroupFromSegmentRequest {
  // segment_id - Id of selected segment
  int64 segment_id = 1 [(validate.rules).int64.gt = 0];
  // connection_id - Id of gophish connection
  int64 connection_id = 2 [(validate.rules).int64.gt = 0];
  // name - Name of the user group in Gophish
  string name = 3 [(validate.rules).string.min_len = 1];
  //
  MappingGophishProfile mapping = 4;
}

message CreateGophishUserGroupFromSegmentResponse {
  // code
  int32 code = 1;
  // message
  string message = 2;
}

message ImportFromMySQLSourceRequest {
  // name - Name of data source
  string name = 1 [(validate.rules).string.min_len = 1];
  // description - Description of data source
  string description = 2 [(validate.rules).string.min_len = 1];
  // connection_id - MySQL connection id
  int64 connection_id = 3;
  // source_table_name - MySQL table name to import data from
  string source_table_name = 4 [(validate.rules).string.min_len = 1];
  // delta_table_name - Delta table name where data will be stored
  string delta_table_name = 5 [(validate.rules).string.min_len = 1];
  // headers
  repeated string headers = 6 [(validate.rules).repeated.min_items = 1];
}

message ImportFromMySQLSourceResponse {
  // code
  int32 code = 1;
  // message
  string message = 2;
}

message ExportToMySQLDestinationRequest {
  // data_table_id - Export data table to MySQL destination
  int64 data_table_id = 1;
  // master_segment_id - Export master segment to MySQL destination
  int64 master_segment_id = 2;
  // segment_id - Export segment to MySQL destination
  int64 segment_id = 3;
  // connection_id - MySQL connection
  int64 connection_id = 4;
  // destination_table_name - Output table name
  string destination_table_name = 5;
}

message ExportToMySQLDestinationResponse {
  // code
  int32 code = 1;
  // message
  string message = 2;
}

message GetListDataDestinationsRequest {
  // page
  int32 page = 1;
  // page_size
  int32 page_size = 2;
  // type
  string type = 3;
}

message GetListDataDestinationsResponse {
  int32 code = 1;
  string message = 2;
  int64 count = 3;
  repeated DataDestination results = 4;
}

message GetListDataActionsRequest {
  // page
  int32 page = 1;
  // page_size
  int32 page_size = 2;
}

message GetListDataActionsResponse {
  int32 code = 1;
  string message = 2;
  int64 count = 3;
  repeated DataAction results = 4;
}

message TrainPredictModelRequest {
  // name
  string name = 1;
  // master_segment_id
  int64 master_segment_id = 2 [(validate.rules).int64.gt = 0];
  // segment1_id - id of first segment for train data
  repeated int64 train_segment_ids = 3;
  // labels - Labels for categories
  repeated string labels = 4;
  // selected_attributes
  repeated string selected_attributes = 5;
}

message TrainPredictModelResponse {
  // code
  int32 code = 1;
  // message
  string message = 2;
}

message GetListPredictModelsRequest {
  // page
  int32 page = 1;
  // page_size
  int32 page_size = 2;
  // master_segment_id
  int64 master_segment_id = 3 [(validate.rules).int64.gt = 0];
}

message GetListPredictModelsResponse {
  // code
  int32 code = 1;
  // message
  string message = 2;
  // count
  int64 count = 3;
  // results - List of predict models
  repeated PredictModel results = 4;
}